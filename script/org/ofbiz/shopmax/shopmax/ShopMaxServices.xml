<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <simple-method method-name="checkPermissionCreateProduct" short-description="Check Permission to Create Product" login-required="false">
        <!-- <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare operator="equals" value="default" field="tenantId">
            <add-error>
                <fail-message message="Can't create Product"/>
            </add-error>
            <check-errors/>
        </if-compare> -->
    </simple-method>
    
    <simple-method method-name="createProductCategoryToSeller" short-description="Create Product Category To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategory" value-field="productCategory">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            </entity-one>
            <if-not-empty field="productCategory">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="createProductCategoryMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryMap = productCategory.getAllFields();
                productCategoryMap.remove('createdStamp');
                productCategoryMap.remove('createdTxStamp');
                productCategoryMap.remove('lastUpdatedStamp');
                productCategoryMap.remove('lastUpdatedTxStamp');
                if (productCategoryMap) return productCategoryMap;}" type="Map"/>
                <set field="createProductCategoryMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="createProductCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="createProductCategoryMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="updateProductCategoryToSeller" short-description="Update Product Category To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategory" value-field="productCategory">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            </entity-one>
            <if-not-empty field="productCategory">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="updateProductCategoryMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryMap = productCategory.getAllFields();
                productCategoryMap.remove('createdStamp');
                productCategoryMap.remove('createdTxStamp');
                productCategoryMap.remove('lastUpdatedStamp');
                productCategoryMap.remove('lastUpdatedTxStamp');
                if (productCategoryMap) return productCategoryMap;}" type="Map"/>
                <set field="updateProductCategoryMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="updateProductCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="updateProductCategoryMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="createCategoryRollUpToSeller" short-description="Create Parent and Child Category in RollUp To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategoryRollup" value-field="productCategoryRollup">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <field-map field-name="parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
                <field-map field-name="fromDate" from-field="parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="productCategoryRollup">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="createProductCategoryRollUpMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryRollUpMap = productCategoryRollup.getAllFields();
                productCategoryRollUpMap.remove('createdStamp');
                productCategoryRollUpMap.remove('createdTxStamp');
                productCategoryRollUpMap.remove('lastUpdatedStamp');
                productCategoryRollUpMap.remove('lastUpdatedTxStamp');
                if (productCategoryRollUpMap) return productCategoryRollUpMap;}" type="Map"/>
                <set field="createProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="safeAddProductCategoryToCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="createProductCategoryRollUpMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
   <simple-method method-name="updateCategoryRollUpToSeller" short-description="Update Parent and Child Category in RollUp To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategoryRollup" value-field="productCategoryRollup">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <field-map field-name="parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
                <field-map field-name="fromDate" from-field="parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="productCategoryRollup">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="updateProductCategoryRollUpMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryRollUpMap = productCategoryRollup.getAllFields();
                productCategoryRollUpMap.remove('createdStamp');
                productCategoryRollUpMap.remove('createdTxStamp');
                productCategoryRollUpMap.remove('lastUpdatedStamp');
                productCategoryRollUpMap.remove('lastUpdatedTxStamp');
                if (productCategoryRollUpMap) return productCategoryRollUpMap;}" type="Map"/>
                <set field="updateProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="updateProductCategoryToCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="updateProductCategoryRollUpMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="deleteCategoryRollUpToSeller" short-description="Delete Parent and Child Category in RollUp To Seller">
       <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
            <set field="deleteProductCategoryRollUpMap.productCategoryId" from-field="parameters.productCategoryId"/>
            <set field="deleteProductCategoryRollUpMap.parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
            <set field="deleteProductCategoryRollUpMap.fromDate" from-field="parameters.fromDate"/>
            <set field="deleteProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
            <entity-and entity-name="PartyRole" list="partyRoles">
                <field-map field-name="roleTypeId" value="SELLER"/>
            </entity-and>
            <iterate entry="partyRole" list="partyRoles">
                <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                <set field="runTenantServiceInMap.serviceName" value="removeProductCategoryFromCategory"/>
                <set field="runTenantServiceInMap.serviceParameters" from-field="deleteProductCategoryRollUpMap"/>
                <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            </iterate>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="createShopmaxCustomer" short-description="Create Shopmax Customer" login-required="false">
        <entity-one entity-name="UserLogin" value-field="systemUserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <entity-one entity-name="ProductStore" value-field="productStore">
             <field-map from-field="parameters.productStoreId" field-name="productStoreId"/>
         </entity-one>
        
        <set from-field="productStore.allowPassword" field="allowPassword"/>
        <set from-field="productStore.defaultPassword" field="defaultPassword"/>
        <if-empty field="allowPassword">
            <set field="allowPassword" value="Y"/>
        </if-empty>
        <if-empty field="defaultPassword">
            <set field="defaultPassword" value="ungssblepswd"/>
        </if-empty>
        
        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>
        
        <now-timestamp field="nowStamp"/>
        <set value="CUSTOMER" field="parameters.roleTypeId"/>
        
        <if-compare field="allowPassword" operator="not-equals" value="Y">
            <set from-field="defaultPassword" field="parameters.PASSWORD"/>
            <set from-field="defaultPassword" field="parameters.CONFIRM_PASSWORD"/>
            <set value="No hint set, account not yet enabled" field="parameters.PASSWORD_HINT"/>
        </if-compare>
        
        <if-compare field="productStore.usePrimaryEmailUsername" operator="equals" value="Y">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
        </if-compare>
        
        <!-- if username and/or password should be lowercased, do that now -->
        <if-compare field="username_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.USERNAME" method-name="toLowerCase" ret-field="parameters.USERNAME"/>
        </if-compare>
        <if-compare field="password_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.PASSWORD" method-name="toLowerCase" ret-field="parameters.PASSWORD"/>
            <call-object-method obj-field="parameters.CONFIRM_PASSWORD" method-name="toLowerCase" ret-field="parameters.CONFIRM_PASSWORD"/>
        </if-compare>
        
        <!-- Create the UserLogin Record -->
        <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
            <simple-map-processor name="newUserLogin">
                <process field="USERNAME"><copy to-field="userLoginId"/><not-empty><fail-property resource="PartyUiLabels" property="PartyUserLoginMissingError"/></not-empty></process>
                <process field="PASSWORD"><copy to-field="currentPassword"/><not-empty><fail-property resource="PartyUiLabels" property="PartyPasswordMissing"/></not-empty></process>
                <process field="CONFIRM_PASSWORD">
                    <compare-field operator="equals" field="PASSWORD"><fail-property resource="PartyUiLabels" property="PartyPasswordMatchError"/></compare-field>                    
                    <copy to-field="currentPasswordVerify"/>
                </process>
                <process field="PASSWORD_HINT"><copy to-field="passwordHint"/></process>
            </simple-map-processor>
        </call-map-processor>
        <if-not-empty field="userLoginContext.userLoginId">
            <set from-field="userLoginContext.userLoginId" field="userLoginExistsMap.userLoginId"/>
            <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin"/>
            <if-not-empty field="existingUserLogin">
                <property-to-field field="tempErrorMessage" resource="PartyUiLabels" property="PartyUserNameInUse"/>
                <string-to-list string="${tempErrorMessage}" message-field="USERNAME" list="error_list"/>
            </if-not-empty>
        </if-not-empty>
        
        <make-value entity-name="UserLogin" value-field="newUserLogin"/>
        <set from-field="userLoginContext.userLoginId" field="newUserLogin.userLoginId"/>
        <set from-field="userLoginContext.currentPassword" field="newUserLogin.currentPassword"/>
        <set from-field="userLoginContext.passwordHint" field="newUserLogin.passwordHint"/>
        
        <!-- Check the password, etc for validity -->
        <call-bsh><![CDATA[
            String password = (String) userLoginContext.get("currentPassword");
            String confirmPassword = (String) userLoginContext.get("currentPasswordVerify");
            String passwordHint = (String) userLoginContext.get("passwordHint");
            org.ofbiz.common.login.LoginServices.checkNewPassword(newUserLogin, null, password, confirmPassword, passwordHint, error_list, true, locale);
        ]]></call-bsh>
        
        <!-- Create the Person -->
        <call-map-processor in-map-name="parameters" out-map-name="personContext">
            <simple-map-processor name="newPerson">
                <process field="USER_FIRST_NAME">
                    <copy to-field="firstName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyFirstNameMissing"/></not-empty>
                </process>
                <process field="USER_MIDDLE_NAME"><copy to-field="middleName"/></process>
                <process field="USER_LAST_NAME">
                    <copy to-field="lastName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyLastNameMissingError"/></not-empty>
                </process>
                <process field="USER_TITLE"><copy to-field="personalTitle"/></process>
                <process field="USER_SUFFIX"><copy to-field="suffix"/></process>
                <process field="USER_BIRTHDATE">
                    <convert type="Date" to-field="birthDate"><fail-property resource="PartyUiLabels" property="PartyBirthDateMissingError"/></convert>
                </process>
                <process field="USER_GENDER"><copy to-field="gender"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <log level="info" message="Creating new customer, newUserLogin=${newUserLogin}"/>
        
        <!-- Create the PartyRole -->
        <set from-field="parameters.roleTypeId" field="partyRoleContext.roleTypeId"/>
        
        <!-- Create the email address -->
        
        <!-- Check for required E-Mail -->
        <if-compare field="parameters.REQUIRE_EMAIL" operator="not-equals" value="false">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="roleTypeId"><copy/></process>
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <not-empty><fail-property resource="PartyUiLabels" property="PartyEmailAddressMissingError"/></not-empty>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        <else>
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="roleTypeId"><copy/></process>
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </else>
        </if-compare>
        
        <!-- create the PartyDataSource entry to track where this info came from... -->
        <make-value entity-name="PartyDataSource" value-field="partyDataSource"/>
        <set value="ECOMMERCE_SITE" field="partyDataSource.dataSourceId"/>
        <set from-field="nowStamp" field="partyDataSource.fromDate"/>
        <set value="Y" field="partyDataSource.isCreate"/>
        <!-- get the visit from the session to get the visitId -->
        <session-to-field field="visit"/>
        <set from-field="visit.visitId" field="partyDataSource.visitId"/>
        
        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>
        
        <set-service-fields map="personContext" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set-service-fields map="newUserLogin" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set from-field="newUserLogin.currentPassword" field="personUserLoginContext.currentPasswordVerify"/>
        <!-- the above copy is okay since we checked already that they are the same -->
        <call-service service-name="createPersonAndUserLogin" in-map-name="personUserLoginContext">
            <result-to-field result-name="partyId" field="tempMap.partyId"/>
            <result-to-field field="createdUserLogin" result-name="newUserLogin"/>
        </call-service>
        <set-current-user-login value-field="createdUserLogin"/>
        
        <!-- create all necessary role -->
        <set from-field="systemUserLogin" field="partyRoleContext.userLogin"/>
        <set from-field="tempMap.partyId" field="partyRoleContext.partyId"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext" include-user-login="true"/>
        
        <set field="createBuyerRoleCtx.userLogin" from-field="systemUserLogin"/>
        <set field="createBuyerRoleCtx.partyId" from-field="tempMap.partyId"/>
        <set field="createBuyerRoleCtx.roleTypeId" value="BUYER"/>
        <call-service service-name="createPartyRole" in-map-name="createBuyerRoleCtx" include-user-login="true"/>
        
        <!-- email address -->
        <if-not-empty field="emailContext.emailAddress">
            <call-service service-name="createPartyEmailAddress" in-map-name="emailContext">
                <result-to-field result-name="contactMechId" field="emailPurposeContext.contactMechId"/>
            </call-service>
            <set from-field="tempMap.partyId" field="emailPurposeContext.partyId"/>
            <set value="PRIMARY_EMAIL" field="emailPurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
        </if-not-empty>
        
        <!-- Associated to Product Store -->
        <set field="createProductStoreRoleMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductStoreRoleMap.partyId" from-field="tempMap.partyId"/>
        <set field="createProductStoreRoleMap.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="createProductStoreRoleMap.productStoreId" from-field="parameters.productStoreId"/>
        <call-service service-name="createProductStoreRole" in-map-name="createProductStoreRoleMap"/>
        
        <!-- send off the registration email -->
        <if-not-empty field="emailContext.emailAddress">
            <set from-field="parameters.productStoreId" field="storeEmailLookup.productStoreId"/>
            <set value="PRDS_CUST_REGISTER" field="storeEmailLookup.emailType"/>
            <find-by-primary-key map="storeEmailLookup" entity-name="ProductStoreEmailSetting"  value-field="storeEmail"/>
            <if-not-empty field="storeEmail.bodyScreenLocation">
                <get-related-one value-field="createdUserLogin" relation-name="Person" to-value-field="person"/>
                <set field="bodyParameters.person" from-field="person"/>
                <set field="emailParams.bodyParameters" from-field="bodyParameters"/>
                <set field="emailParams.sendTo" from-field="emailContext.emailAddress"/>
                <set field="emailParams.subject" from-field="storeEmail.subject"/>
                <set field="emailParams.sendFrom" from-field="storeEmail.fromAddress"/>
                <set field="emailParams.sendCc" from-field="storeEmail.ccAddress"/>
                <set field="emailParams.sendBcc" from-field="storeEmail.bccAddress"/>
                <set field="emailParams.contentType" from-field="storeEmail.contentType"/>
                <set field="emailParams.bodyScreenUri" from-field="storeEmail.bodyScreenLocation"/>
                <set field="emailParams.emailType" from-field="storeEmailLookup.emailType"/>
                <call-service-asynch service-name="sendMailFromScreen" in-map-name="emailParams" include-user-login="true"/>
            </if-not-empty>
        </if-not-empty>
        
        <!-- security for manage profile  -->
        <set field="securityParams.userLoginId" from-field="createdUserLogin.userLoginId"/>
        <set field="securityParams.groupId" value="ECOMMERCE_CUSTOMER"/>
        <set field="securityParams.userLogin" from-field="systemUserLogin"/>
        <call-service service-name="addUserLoginToSecurityGroup" in-map-name="securityParams"/>
        
        <!-- tell the control servlet that we just logged in the user... -->
        <set value="TRUE" field="_LOGIN_PASSED_"/>
        <field-to-request field="_LOGIN_PASSED_"/>
        
        <field-to-result field="parameters.CUSTOMER_EMAIL" result-name="USERNAME"/>
        <field-to-result field="parameters.PASSWORD" result-name="PASSWORD"/>
        
        <if-compare field="parameters.businessUser" operator="equals" value="Y">
            <set field="createSellerRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createSellerRoleCtx.partyId" from-field="tempMap.partyId"/>
            <set field="createSellerRoleCtx.roleTypeId" value="SELLER"/>
            <call-service service-name="createPartyRole" in-map-name="createSellerRoleCtx" include-user-login="true"/>
            
            <set field="createEmployeeRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createEmployeeRoleCtx.partyId" from-field="tempMap.partyId"/>
            <set field="createEmployeeRoleCtx.roleTypeId" value="EMPLOYEE"/>
            <call-service service-name="createPartyRole" in-map-name="createEmployeeRoleCtx" include-user-login="true"/>
            
            <!-- Create party group -->
            <set field="partyGroupCtx.userLogin" from-field="systemUserLogin"/>
            <set field="partyGroupCtx.groupName" from-field="parameters.officialBusinessName"/>
            <set field="partyGroupCtx.groupNameLocal" from-field="parameters.officialTradingName"/>
            <set field="partyGroupCtx.partyTypeId" value="PARTY_GROUP"/>
            <call-service service-name="createPartyGroup" in-map-name="partyGroupCtx">
                <result-to-field result-name="partyId" field="partyGroupPartyId"/>
            </call-service>
            
            <!-- Create organization role -->
            <set field="createOrganizationRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createOrganizationRoleCtx.partyId" from-field="partyGroupPartyId"/>
            <set field="createOrganizationRoleCtx.roleTypeId" value="ORGANIZATION_ROLE"/>
            <call-service service-name="createPartyRole" in-map-name="createOrganizationRoleCtx"/>
            
            <!-- Create party relationship company and person -->
            <set field="partyRelationshipCtx.userLogin" from-field="systemUserLogin"/>
            <set field="partyRelationshipCtx.partyIdFrom" from-field="partyGroupPartyId"/>
            <set field="partyRelationshipCtx.partyIdTo" from-field="tempMap.partyId"/>
            <set field="partyRelationshipCtx.roleTypeIdFrom" value="ORGANIZATION_ROLE"/>
            <set field="partyRelationshipCtx.roleTypeIdTo" value="EMPLOYEE"/>
            <set field="partyRelationshipCtx.partyRelationshipTypeId" value="EMPLOYMENT"/>
            <call-service service-name="createPartyRelationship" in-map-name="partyRelationshipCtx"/>
            
            <set field="createSupplierRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createSupplierRoleCtx.partyId" from-field="partyGroupPartyId"/>
            <set field="createSupplierRoleCtx.roleTypeId" value="SUPPLIER"/>
            <call-service service-name="createPartyRole" in-map-name="createSupplierRoleCtx" include-user-login="true"/>
            
            <!-- Set domain name -->
            <if-compare field="parameters.checkDomain" operator="equals" value="Y">
                <set field="parameters.domainName" value="http://${parameters.ownDomainName}"/>
                <set field="parameters.domainNameBackend" value="http://backend.${parameters.ownDomainName}"/>
            <else>
                <set field="parameters.domainName" value="http://${parameters.freeDomainName}.shopmax.co.nz"/>
                <set field="parameters.domainNameBackend" value="http://backend.${parameters.freeDomainName}.shopmax.co.nz"/>
            </else>
            </if-compare>
            
            <!-- Create the contact phone number -->
            <if-not-empty field="parameters.contactPhoneNumber">
                <set field="homePhoneContext.contactNumber" from-field="parameters.contactPhoneNumber"/>
                <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
                    <result-to-field result-name="contactMechId" field="homePhonePurposeContext.contactMechId"/>
                </call-service>
                <set from-field="tempMap.partyId" field="homePhonePurposeContext.partyId"/>
                <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
            </if-not-empty>
            
            <!-- Create the  Notification phone number -->
            <if-not-empty field="parameters.notificationPhoneNumber">
                <set field="mobilePhoneContext.contactNumber" from-field="parameters.notificationPhoneNumber"/>
                <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhonePurposeContext.contactMechId"/>
                </call-service>
                <set from-field="tempMap.partyId" field="mobilePhonePurposeContext.partyId"/>
                <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
            </if-not-empty>
            
            <set field="parameters.partyId" from-field="tempMap.partyId"/>
            
            <!-- Upload shop logo -->
            <if-not-empty field="parameters._uploadedFile_fileName">
                <set-service-fields service-name="uploadPartyContentFile"
                    map="parameters" to-map="uploadLogoMap"/>
                <set field="uploadLogoMap.userLogin" from-field="systemUserLogin"/>
                <set field="uploadLogoMap._uploadedFile_fileName" from-field="parameters._uploadedFile_fileName"/>
                <set field="uploadLogoMap.uploadedFile" from-field="parameters.uploadedFile"/>
                <set field="uploadLogoMap._uploadedFile_contentType" from-field="parameters._uploadedFile_contentType"/>
                <set field="uploadLogoMap.partyContentTypeId" value="LGOIMGURL"/>
                <set field="uploadLogoMap.isPublic" value="Y"/>
                <call-service service-name="uploadPartyContentFile" in-map-name="uploadLogoMap" break-on-error="false" />
            </if-not-empty>
            
            <!-- Create bank account -->
            <set field="createEftAccountMap.userLogin" from-field="systemUserLogin"/>
            <set field="createEftAccountMap.partyId" from-field="tempMap.partyId"/>
            <set field="createEftAccountMap.bankName" from-field="parameters.bankName"/>
            <set field="createEftAccountMap.nameOnAccount" from-field="parameters.nameOnAccount"/>
            <set field="createEftAccountMap.accountNumber" from-field="parameters.accountNumber"/>
            <set field="createEftAccountMap.routingNumber" from-field="parameters.routingNumber"/>
            <set field="createEftAccountMap.accountType" from-field="parameters.accountType"/>
            <call-service service-name="createEftAccount" in-map-name="createEftAccountMap"/>
            
            <!-- Create physical stores -->
            <!-- <set field="locationContext.address1" from-field="parameters.location"/>
            <call-service service-name="createPartyPostalAddress" in-map-name="locationContext">
                <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
            </call-service>
            <set from-field="tempMap.partyId" field="addressPurposeContext.partyId"/>
            <set value="PHYS_STORE_LOCATION" field="addressPurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
            
            <set field="createStorePhoneNumberMap.contactMechId" from-field="addressPurposeContext.contactMechId"/>
            <set field="createStorePhoneNumberMap.attrName" value="STORE_PHONE_NUMBER"/>
            <set field="createStorePhoneNumberMap.attrValue" from-field="parameters.storePhoneNumber"/>
            <set field="createStorePhoneNumberMap.userLogin" from-field="systemUserLogin"/>
            <call-service service-name="createContactMechAttribute" in-map-name="createStorePhoneNumberMap"/>
            
            <set field="createMonOpeningHoursMap.contactMechId" from-field="addressPurposeContext.contactMechId"/>
            <set field="createMonOpeningHoursMap.attrName" value="MON_OPENING_HOURS"/>
            <set field="createMonOpeningHoursMap.attrValue" from-field="parameters.monOpeningHours"/>
            <set field="createMonOpeningHoursMap.userLogin" from-field="systemUserLogin"/>
            <call-service service-name="createContactMechAttribute" in-map-name="createMonOpeningHoursMap"/> -->
            
            <!-- Upload driver license -->
            <if-not-empty field="parameters._uploadedFile1_fileName">
                <set-service-fields service-name="uploadPartyContentFile"
                    map="parameters" to-map="uploadDriverLicenseMap"/>
                <set field="uploadDriverLicenseMap.userLogin" from-field="systemUserLogin"/>
                <set field="uploadDriverLicenseMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
                <set field="uploadDriverLicenseMap.uploadedFile" from-field="parameters.uploadedFile1"/>
                <set field="uploadDriverLicenseMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
                <set field="uploadDriverLicenseMap.partyContentTypeId" value="INTERNAL"/>
                <set field="uploadDriverLicenseMap.isPublic" value="Y"/>
                <call-service service-name="uploadPartyContentFile" in-map-name="uploadDriverLicenseMap" break-on-error="false" />
            </if-not-empty>
            
            <!-- Create credit card or debit card -->
            <if-compare operator="equals" value="Y" field="parameters.checkCreditCard">
                <set field="createCreditCardMap.userLogin" from-field="systemUserLogin"/>
                <set field="createCreditCardMap.partyId" from-field="tempMap.partyId"/>
                <set field="createCreditCardMap.firstNameOnCard" from-field="parameters.firstNameOnCard"/>
                <set field="createCreditCardMap.lastNameOnCard" from-field="parameters.lastNameOnCard"/>
                <set field="createCreditCardMap.cardType" value="visa"/>
                <set field="createCreditCardMap.cardNumber" from-field="parameters.cardNumber"/>
                <set field="createCreditCardMap.expireDate" from-field="parameters.expireDate"/>
                <!-- <set field="createCreditCardMap.cvc" from-field="parameters.cvc"/> -->
                <call-service service-name="createCreditCard" in-map-name="createCreditCardMap"/>
                <else>
                    <if-not-empty field="parameters._uploadedFile2_fileName">
                        <set-service-fields service-name="uploadPartyContentFile" map="parameters" to-map="uploadDebitFormMap"/>
                        <set field="uploadDebitFormMap.userLogin" from-field="systemUserLogin"/>
                        <set field="uploadDebitFormMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
                        <set field="uploadDebitFormMap.uploadedFile" from-field="parameters.uploadedFile2"/>
                        <set field="uploadDebitFormMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
                        <set field="uploadDebitFormMap.partyContentTypeId" value="INTERNAL"/>
                        <set field="uploadDebitFormMap.isPublic" value="Y"/>
                        <call-service service-name="uploadPartyContentFile" in-map-name="uploadDebitFormMap" break-on-error="false" />
                    </if-not-empty>
                </else>
            </if-compare>
            
            <set field="addSellerSecurityGroupMap.userLogin" from-field="systemUserLogin"/>
            <set field="addSellerSecurityGroupMap.userLoginId" from-field="createdUserLogin.userLoginId"/>
            <set field="addSellerSecurityGroupMap.groupId" value="SHOPMAX_SELLER"/>
            <call-service service-name="addUserLoginToSecurityGroup" in-map-name="addSellerSecurityGroupMap"/>
            
            <!-- Create Tenant -->
            <make-value value-field="tenant" entity-name="Tenant"/>
            <set field="tenant.tenantId" from-field="tempMap.partyId"/>
            <set field="tenant.tenantName" from-field="tempMap.partyId"/>
            <create-value value-field="tenant"/>
            
            <!-- Create Tenant Domain Name -->
            <make-value value-field="tenantDomainName" entity-name="TenantDomainName"/>
            <set field="tenantDomainName.tenantId" from-field="tempMap.partyId"/>
            <set field="tenantDomainName.domainName" from-field="parameters.domainName"/>
            <create-value value-field="tenantDomainName"/>
            
            <!-- Create Tenant Backend Domain Name -->
            <make-value value-field="tenantBackendDomainName" entity-name="TenantDomainName"/>
            <set field="tenantBackendDomainName.tenantId" from-field="tempMap.partyId"/>
            <set field="tenantBackendDomainName.domainName" from-field="parameters.domainNameBackend"/>
            <set field="tenantBackendDomainName.initialPath" value="/catalog"/>
            <create-value value-field="tenantBackendDomainName"/>
            
            <!-- Create Tenant Component Shopmax -->
            <make-value value-field="tenantComponentShopmax" entity-name="TenantComponent"/>
            <set field="tenantComponentShopmax.tenantId" from-field="tempMap.partyId"/>
            <set field="tenantComponentShopmax.componentName" value="shopmax"/>
            <set field="tenantComponentShopmax.sequenceNum" value="01" type="Long"/>
            <create-value value-field="tenantComponentShopmax"/>
            
            <!-- Create Tenant Component Shopmax Seller -->
            <make-value value-field="tenantComponentShopmaxSeller" entity-name="TenantComponent"/>
            <set field="tenantComponentShopmaxSeller.tenantId" from-field="tempMap.partyId"/>
            <set field="tenantComponentShopmaxSeller.componentName" value="shopmaxseller"/>
            <set field="tenantComponentShopmaxSeller.sequenceNum" from-field="02" type="Long"/>
            <create-value value-field="tenantComponentShopmaxSeller"/>
         </if-compare>
    </simple-method>
    
    <simple-method method-name="uploadProductSeller" short-description="Upload Product Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <!-- Create product -->
        <set field="createProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductMap.productTypeId" value="FINISHED_GOOD"/>
        <set field="createProductMap.internalName" from-field="parameters.productName"/>
        <set field="createProductMap.productName" from-field="parameters.productName"/>
        <set field="createProductMap.description" from-field="parameters.description"/>
        
        <if-compare field="tenantId" operator="equals" value="default">
            <set field="createProductMap.requirementMethodEnumId" value="PRODRQM_DS"/>
        </if-compare>
        
        <call-service service-name="createProduct" in-map-name="createProductMap">
            <result-to-field result-name="productId" field="parameters.productId"/>
        </call-service>
        <field-to-result field="parameters.productId" result-name="productId"/>
        
        <entity-one value-field="product" entity-name="Product">
            <field-map field-name="productId" from-field="parameters.productId"/>
        </entity-one>
        <set field="product.createdByUserLogin" from-field="userLogin.userLoginId"/>
        <store-value value-field="product"/>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._uploadedFile_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile1_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile1"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile2_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile2"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile3_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile3"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile3_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile3_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <!-- Create product price -->
        <set field="createProductPriceMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductPriceMap.productId" from-field="parameters.productId"/>
        <set field="createProductPriceMap.currencyUomId" value="NZD"/>
        <set field="createProductPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
        <set field="createProductPriceMap.productStoreGroupId" value="_NA_"/>
        <set field="createProductPriceMap.productPricePurposeId" value="PURCHASE"/>
        <set field="createProductPriceMap.productPriceTypeId" value="DEFAULT_PRICE"/>
        <call-service service-name="createProductPrice" in-map-name="createProductPriceMap"/>
        
        <set field="createProductPriceMap.productPriceTypeId" value="LIST_PRICE"/>
        <call-service service-name="createProductPrice" in-map-name="createProductPriceMap"/>
        
        <if-not-empty field="parameters.promoPrice">
            <set field="createProductPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
            <set field="createProductPriceMap.productPriceTypeId" value="PROMO_PRICE"/>
            <set field="createProductPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
            <set field="createProductPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
            <call-service service-name="createProductPrice" in-map-name="createProductPriceMap"/>
        </if-not-empty>
        
        <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
        <set field="createProductAttributeMap.attrName" value="SHIPPING_SIZE"/>
        <set field="createProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
        <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
        
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-and list="partyRelationships" entity-name="PartyRelationship" filter-by-date="true">
                <field-map field-name="partyIdTo" from-field="userLogin.partyId"/>
                <field-map field-name="roleTypeIdFrom" value="ORGANIZATION_ROLE"/>
                <field-map field-name="partyRelationshipTypeId" value="EMPLOYMENT"/>
                <field-map field-name="roleTypeIdTo" value="EMPLOYEE"/>
            </entity-and>
            <if-not-empty field="partyRelationships">
                <first-from-list entry="partyRelationship" list="partyRelationships"/>
                <set field="createSupplierProductMap.userLogin" from-field="systemUserLogin"/>
                <set field="createSupplierProductMap.productId" from-field="parameters.productId"/>
                <set field="createSupplierProductMap.partyId" from-field="partyRelationship.partyIdFrom"/>
                <set field="createSupplierProductMap.availableFromDate" from-field="nowTimestamp"/>
                <set field="createSupplierProductMap.minimumOrderQuantity" value="0" type="BigDecimal"/>
                <set field="createSupplierProductMap.lastPrice" from-field="parameters.listingPrice" type="BigDecimal"/>
                <set field="createSupplierProductMap.currencyUomId" value="NZD"/>
                <set field="createSupplierProductMap.supplierProductName" from-field="parameters.productName"/>
                <set field="createSupplierProductMap.supplierProductId" from-field="parameters.productId"/>
                <set field="createSupplierProductMap.canDropShip" value="Y"/>
                <call-service service-name="createSupplierProduct" in-map-name="createSupplierProductMap"/>
                
                <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
                <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
                <set field="createProductAttributeMap.attrName" value="STOCK"/>
                <set field="createProductAttributeMap.attrValue" from-field="parameters.stock"/>
                <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
            <else>
                <set field="receiveCtx.productId" from-field="parameters.productId"/>
                <set field="receiveCtx.facilityId" value="SellerWarehouse"/>
                <set field="receiveCtx.quantityAccepted" from-field="parameters.stock"/>
                <set field="receiveCtx.quantityRejected" value="0" type="BigDecimal"/>
                <set field="receiveCtx.inventoryItemTypeId" value="SERIALIZED_INV_ITEM"/>
                <call-service service-name="receiveInventoryProduct" in-map-name="receiveCtx"/>
            </else>
            </if-not-empty>
        </if-compare>
        
        <!-- Create product to product category -->
        <set field="categoryLists" from-field="parameters.listCategory"/>
        <set field="categoryList" value="${groovy: categoryList = categoryLists.split(&quot;,&quot;); return categoryList.toList();}" type="List"/>
        <iterate entry="productCategoryId" list="categoryList" >
            <set field="createProductToCategoryMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductToCategoryMap.productCategoryId" from-field="productCategoryId"/>
            <set field="createProductToCategoryMap.productId" from-field="parameters.productId"/>
            <set field="createProductToCategoryMap.fromDate" from-field="nowTimestamp"/>
            <call-service service-name="safeAddProductToCategory" in-map-name="createProductToCategoryMap"/>
        </iterate>
    </simple-method>
    
    <simple-method method-name="createTenantForSeller" short-description="Upload Product Seller">
        <!-- Create Tenant Data Sources -->
        <property-to-field resource="tenant" property="jdbcUriPrefix" field="jdbcUriPrefix"/>
        <property-to-field resource="tenant" property="jdbcUriSuffix" field="jdbcUriSuffix"/>
        <property-to-field resource="tenant" property="jdbcPassword" field="jdbcPassword"/>
        
        <if-compare field="isDemo" operator="equals" value="Y">
            <set field="databaseNamePrefix" value="demo"/>
            <else>
                <set field="databaseNamePrefix" value="prod"/>
            </else>
        </if-compare>
         
        <!-- org.ofbiz -->
        <set field="ofbizEntityGroupName" value="org.ofbiz"/>
        
        <!-- remove if exists -->
        <entity-one value-field="existOfbizDataSource" entity-name="TenantDataSource">
            <field-map field-name="tenantId" from-field="tempMap.partyId"/>
            <field-map field-name="entityGroupName" from-field="ofbizEntityGroupName"/>
        </entity-one>
        <if-not-empty field="existOfbizDataSource">
            <remove-value value-field="existOfbizDataSource"/>
        </if-not-empty>
        
        <make-value value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <set field="tenantDataSource.tenantId" from-field="tempMap.partyId"/>
        <set field="tenantDataSource.entityGroupName" from-field="ofbizEntityGroupName"/>
        <set field="tenantDataSource.jdbcUri" value="${jdbcUriPrefix}${databaseNamePrefix}${tempMap.partyId}ofbiz${jdbcUriSuffix}"/>
        <if-compare operator="equals" value="Y" field="isDemo">
            <property-to-field resource="tenantDemo" property="jdbcUsername" field="demoJdbcUsername"/>
            <property-to-field resource="tenantDemo" property="jdbcPassword" field="demoJdbcPassword"/>
            <set field="tenantDataSource.jdbcUsername" from-field="demoJdbcUsername"/>
            <set field="tenantDataSource.jdbcPassword" from-field="demoJdbcPassword"/>
            <else>
                <set field="tenantDataSource.jdbcUsername" value="T${tempMap.partyId}N"/>
                <set field="tenantDataSource.jdbcPassword" from-field="jdbcPassword"/>
            </else>
        </if-compare>
        <create-value value-field="tenantDataSource"/>
        
        <!-- org.ofbiz.olap -->
        <set field="olapEntityGroupName" value="org.ofbiz.olap"/>
        
        <!-- remove if exists -->
        <entity-one value-field="existOlapDataSource" entity-name="TenantDataSource">
            <field-map field-name="tenantId" from-field="tempMap.partyId"/>
            <field-map field-name="entityGroupName" from-field="olapEntityGroupName"/>
        </entity-one>
        <if-not-empty field="existOlapDataSource">
            <remove-value value-field="existOlapDataSource"/>
        </if-not-empty>
        
        <make-value value-field="tenantDataSourceOlap" entity-name="TenantDataSource"/>
        <set field="tenantDataSourceOlap.tenantId" from-field="tempMap.partyId"/>
        <set field="tenantDataSourceOlap.entityGroupName" from-field="olapEntityGroupName"/>
        <set field="tenantDataSourceOlap.jdbcUri" value="${jdbcUriPrefix}${databaseNamePrefix}${tempMap.partyId}olap${jdbcUriSuffix}"/>
        <if-compare operator="equals" value="Y" field="isDemo">
        <property-to-field resource="tenantDemo" property="jdbcUsername" field="demoJdbcUsername"/>
        <property-to-field resource="tenantDemo" property="jdbcPassword" field="demoJdbcPassword"/>
        <set field="tenantDataSourceOlap.jdbcUsername" from-field="demoJdbcUsername"/>
        <set field="tenantDataSourceOlap.jdbcPassword" from-field="demoJdbcPassword"/>
        <else>
            <set field="tenantDataSourceOlap.jdbcUsername" value="T${tempMap.partyId}N"/>
            <set field="tenantDataSourceOlap.jdbcPassword" from-field="jdbcPassword"/>
        </else>
        </if-compare>
        <create-value value-field="tenantDataSourceOlap"/>
    </simple-method>
</simple-methods>
