<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <simple-method method-name="checkPermissionCreateProduct" short-description="Check Permission to Create Product" login-required="false">
        <!-- <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare operator="equals" value="default" field="tenantId">
            <add-error>
                <fail-message message="Can't create Product"/>
            </add-error>
            <check-errors/>
        </if-compare> -->
    </simple-method>
    
    <simple-method method-name="createProductCategoryToSeller" short-description="Create Product Category To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategory" value-field="productCategory">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            </entity-one>
            <if-not-empty field="productCategory">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="createProductCategoryMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryMap = productCategory.getAllFields();
                productCategoryMap.remove('createdStamp');
                productCategoryMap.remove('createdTxStamp');
                productCategoryMap.remove('lastUpdatedStamp');
                productCategoryMap.remove('lastUpdatedTxStamp');
                if (productCategoryMap) return productCategoryMap;}" type="Map"/>
                <set field="createProductCategoryMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="createProductCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="createProductCategoryMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="updateProductCategoryToSeller" short-description="Update Product Category To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategory" value-field="productCategory">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            </entity-one>
            <if-not-empty field="productCategory">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="updateProductCategoryMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryMap = productCategory.getAllFields();
                productCategoryMap.remove('createdStamp');
                productCategoryMap.remove('createdTxStamp');
                productCategoryMap.remove('lastUpdatedStamp');
                productCategoryMap.remove('lastUpdatedTxStamp');
                if (productCategoryMap) return productCategoryMap;}" type="Map"/>
                <set field="updateProductCategoryMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="updateProductCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="updateProductCategoryMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="createCategoryRollUpToSeller" short-description="Create Parent and Child Category in RollUp To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategoryRollup" value-field="productCategoryRollup">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <field-map field-name="parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
                <field-map field-name="fromDate" from-field="parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="productCategoryRollup">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="createProductCategoryRollUpMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryRollUpMap = productCategoryRollup.getAllFields();
                productCategoryRollUpMap.remove('createdStamp');
                productCategoryRollUpMap.remove('createdTxStamp');
                productCategoryRollUpMap.remove('lastUpdatedStamp');
                productCategoryRollUpMap.remove('lastUpdatedTxStamp');
                if (productCategoryRollUpMap) return productCategoryRollUpMap;}" type="Map"/>
                <set field="createProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="safeAddProductCategoryToCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="createProductCategoryRollUpMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
   <simple-method method-name="updateCategoryRollUpToSeller" short-description="Update Parent and Child Category in RollUp To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategoryRollup" value-field="productCategoryRollup">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <field-map field-name="parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
                <field-map field-name="fromDate" from-field="parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="productCategoryRollup">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="updateProductCategoryRollUpMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryRollUpMap = productCategoryRollup.getAllFields();
                productCategoryRollUpMap.remove('createdStamp');
                productCategoryRollUpMap.remove('createdTxStamp');
                productCategoryRollUpMap.remove('lastUpdatedStamp');
                productCategoryRollUpMap.remove('lastUpdatedTxStamp');
                if (productCategoryRollUpMap) return productCategoryRollUpMap;}" type="Map"/>
                <set field="updateProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="updateProductCategoryToCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="updateProductCategoryRollUpMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="deleteCategoryRollUpToSeller" short-description="Delete Parent and Child Category in RollUp To Seller">
       <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
            <set field="deleteProductCategoryRollUpMap.productCategoryId" from-field="parameters.productCategoryId"/>
            <set field="deleteProductCategoryRollUpMap.parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
            <set field="deleteProductCategoryRollUpMap.fromDate" from-field="parameters.fromDate"/>
            <set field="deleteProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
            <entity-and entity-name="PartyRole" list="partyRoles">
                <field-map field-name="roleTypeId" value="SELLER"/>
            </entity-and>
            <iterate entry="partyRole" list="partyRoles">
                <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                <set field="runTenantServiceInMap.serviceName" value="removeProductCategoryFromCategory"/>
                <set field="runTenantServiceInMap.serviceParameters" from-field="deleteProductCategoryRollUpMap"/>
                <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            </iterate>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="uploadProductSeller" short-description="Upload Product Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <!-- Create product -->
        <set field="createProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductMap.productTypeId" value="FINISHED_GOOD"/>
        <set field="createProductMap.internalName" from-field="parameters.productName"/>
        <set field="createProductMap.productName" from-field="parameters.productName"/>
        <set field="createProductMap.description" from-field="parameters.description"/>
        <call-service service-name="createProduct" in-map-name="createProductMap">
            <result-to-field result-name="productId" field="parameters.productId"/>
        </call-service>
        <field-to-result field="parameters.productId" result-name="productId"/>
        
        <entity-one value-field="product" entity-name="Product">
            <field-map field-name="productId" from-field="parameters.productId"/>
        </entity-one>
        <set field="product.createdByUserLogin" from-field="userLogin.userLoginId"/>
        <store-value value-field="product"/>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._additionalImageOne_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/>
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.additionalImageOne"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._additionalImageOne_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._additionalImageOne_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._additionalImageTwo_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/>
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.additionalImageTwo"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._additionalImageTwo_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._additionalImageTwo_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._additionalImageThree_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/>
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.additionalImageThree"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._additionalImageThree_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._additionalImageThree_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._additionalImageFour_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/>
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.additionalImageFour"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._additionalImageFour_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._additionalImageFour_contentType"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <!-- Create product price -->
        <set field="createProductPriceMap.productId" from-field="parameters.productId"/>
        <set field="createProductPriceMap.currencyUomId" value="NZD"/>
        <set field="createProductPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
        <set field="createProductPriceMap.productStoreGroupId" value="_NA_"/>
        <set field="createProductPriceMap.productPricePurposeId" value="PURCHASE"/>
        <set field="createProductPriceMap.productPriceTypeId" value="DEFAULT_PRICE"/>
        <call-service service-name="createProductPrice" in-map-name="createProductPriceMap"/>
        
        <set field="createProductPriceMap.productPriceTypeId" value="LIST_PRICE"/>
        <call-service service-name="createProductPrice" in-map-name="createProductPriceMap"/>
        
        <set field="createProductPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
        <set field="createProductPriceMap.productPriceTypeId" value="PROMO_PRICE"/>
        <set field="createProductPriceMap.fromDate" from-field="parameters.promoPriceFromDate"/>
        <set field="createProductPriceMap.thruDate" from-field="parameters.promoPriceThruDate"/>
        <call-service service-name="createProductPrice" in-map-name="createProductPriceMap"/>
    </simple-method>
</simple-methods>
