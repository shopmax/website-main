<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

    <simple-method method-name="checkPermissionCreateProduct" short-description="Check Permission to Create Product" login-required="false">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare operator="equals" value="default" field="tenantId">
            <add-error>
                <fail-message message="Can't create Product"/>
            </add-error>
            <check-errors/>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="createProductCategoryToSeller" short-description="Create Product Category To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategory" value-field="productCategory">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            </entity-one>
            <if-not-empty field="productCategory">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="createProductCategoryMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryMap = productCategory.getAllFields();
                productCategoryMap.remove('createdStamp');
                productCategoryMap.remove('createdTxStamp');
                productCategoryMap.remove('lastUpdatedStamp');
                productCategoryMap.remove('lastUpdatedTxStamp');
                if (productCategoryMap) return productCategoryMap;}" type="Map"/>
                <set field="createProductCategoryMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="createProductCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="createProductCategoryMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="updateProductCategoryToSeller" short-description="Update Product Category To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategory" value-field="productCategory">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
            </entity-one>
            <if-not-empty field="productCategory">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="updateProductCategoryMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryMap = productCategory.getAllFields();
                productCategoryMap.remove('createdStamp');
                productCategoryMap.remove('createdTxStamp');
                productCategoryMap.remove('lastUpdatedStamp');
                productCategoryMap.remove('lastUpdatedTxStamp');
                if (productCategoryMap) return productCategoryMap;}" type="Map"/>
                <set field="updateProductCategoryMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="updateProductCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="updateProductCategoryMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="createCategoryRollUpToSeller" short-description="Create Parent and Child Category in RollUp To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategoryRollup" value-field="productCategoryRollup">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <field-map field-name="parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
                <field-map field-name="fromDate" from-field="parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="productCategoryRollup">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="createProductCategoryRollUpMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryRollUpMap = productCategoryRollup.getAllFields();
                productCategoryRollUpMap.remove('createdStamp');
                productCategoryRollUpMap.remove('createdTxStamp');
                productCategoryRollUpMap.remove('lastUpdatedStamp');
                productCategoryRollUpMap.remove('lastUpdatedTxStamp');
                if (productCategoryRollUpMap) return productCategoryRollUpMap;}" type="Map"/>
                <set field="createProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="safeAddProductCategoryToCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="createProductCategoryRollUpMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
   <simple-method method-name="updateCategoryRollUpToSeller" short-description="Update Parent and Child Category in RollUp To Seller">
        <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="ProductCategoryRollup" value-field="productCategoryRollup">
                <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
                <field-map field-name="parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
                <field-map field-name="fromDate" from-field="parameters.fromDate"/>
            </entity-one>
            <if-not-empty field="productCategoryRollup">
                <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                    <field-map field-name="userLoginId" value="system"/>
                </entity-one>
                <set field="updateProductCategoryRollUpMap" value="${groovy: import org.ofbiz.entity.util.EntityUtil;
                Map productCategoryRollUpMap = productCategoryRollup.getAllFields();
                productCategoryRollUpMap.remove('createdStamp');
                productCategoryRollUpMap.remove('createdTxStamp');
                productCategoryRollUpMap.remove('lastUpdatedStamp');
                productCategoryRollUpMap.remove('lastUpdatedTxStamp');
                if (productCategoryRollUpMap) return productCategoryRollUpMap;}" type="Map"/>
                <set field="updateProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
                <entity-and entity-name="PartyRole" list="partyRoles">
                    <field-map field-name="roleTypeId" value="SELLER"/>
                </entity-and>
                <iterate entry="partyRole" list="partyRoles">
                    <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                    <set field="runTenantServiceInMap.serviceName" value="updateProductCategoryToCategory"/>
                    <set field="runTenantServiceInMap.serviceParameters" from-field="updateProductCategoryRollUpMap"/>
                    <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
                </iterate>
            </if-not-empty>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="deleteCategoryRollUpToSeller" short-description="Delete Parent and Child Category in RollUp To Seller">
       <set field="tenantId" value="${groovy:delegator.getDelegatorTenantId();}"/>
        <if-compare field="tenantId" operator="equals" value="default">
            <entity-one entity-name="UserLogin" value-field="sysUserLogin">
                <field-map field-name="userLoginId" value="system"/>
            </entity-one>
            <set field="deleteProductCategoryRollUpMap.productCategoryId" from-field="parameters.productCategoryId"/>
            <set field="deleteProductCategoryRollUpMap.parentProductCategoryId" from-field="parameters.parentProductCategoryId"/>
            <set field="deleteProductCategoryRollUpMap.fromDate" from-field="parameters.fromDate"/>
            <set field="deleteProductCategoryRollUpMap.userLogin" from-field="sysUserLogin"/>
            <entity-and entity-name="PartyRole" list="partyRoles">
                <field-map field-name="roleTypeId" value="SELLER"/>
            </entity-and>
            <iterate entry="partyRole" list="partyRoles">
                <set field="runTenantServiceInMap.tenantId" from-field="partyRole.partyId"/>
                <set field="runTenantServiceInMap.serviceName" value="removeProductCategoryFromCategory"/>
                <set field="runTenantServiceInMap.serviceParameters" from-field="deleteProductCategoryRollUpMap"/>
                <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            </iterate>
        </if-compare>
    </simple-method>
    
    <simple-method method-name="createShopmaxCustomer" short-description="Create Shopmax Customer" login-required="false">
            <entity-one entity-name="UserLogin" value-field="systemUserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <entity-one entity-name="ProductStore" value-field="productStore">
            <field-map from-field="parameters.productStoreId" field-name="productStoreId"/>
        </entity-one>
        
        <set from-field="productStore.allowPassword" field="allowPassword"/>
        <set from-field="productStore.defaultPassword" field="defaultPassword"/>
        <if-empty field="allowPassword">
            <set field="allowPassword" value="Y"/>
        </if-empty>
        <if-empty field="defaultPassword">
            <set field="defaultPassword" value="ungssblepswd"/>
        </if-empty>
        
        <property-to-field resource="security" property="username.lowercase" default="false" field="username_lowercase"/>
        <property-to-field resource="security" property="password.lowercase" default="false" field="password_lowercase"/>
        
        <now-timestamp field="nowStamp"/>
        <set value="CUSTOMER" field="parameters.roleTypeId"/>
        
        <if-compare field="allowPassword" operator="not-equals" value="Y">
            <set from-field="defaultPassword" field="parameters.PASSWORD"/>
            <set from-field="defaultPassword" field="parameters.CONFIRM_PASSWORD"/>
            <set value="No hint set, account not yet enabled" field="parameters.PASSWORD_HINT"/>
        </if-compare>
        
        <if-compare field="productStore.usePrimaryEmailUsername" operator="equals" value="Y">
            <set field="parameters.USERNAME" from-field="parameters.CUSTOMER_EMAIL"/>
        </if-compare>
        
        <!-- if username and/or password should be lowercased, do that now -->
        <if-compare field="username_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.USERNAME" method-name="toLowerCase" ret-field="parameters.USERNAME"/>
        </if-compare>
        <if-compare field="password_lowercase" operator="equals" value="true">
            <call-object-method obj-field="parameters.PASSWORD" method-name="toLowerCase" ret-field="parameters.PASSWORD"/>
            <call-object-method obj-field="parameters.CONFIRM_PASSWORD" method-name="toLowerCase" ret-field="parameters.CONFIRM_PASSWORD"/>
        </if-compare>
        
        <!-- Create the UserLogin Record -->
        <call-map-processor in-map-name="parameters" out-map-name="userLoginContext">
            <simple-map-processor name="newUserLogin">
                <process field="USERNAME"><copy to-field="userLoginId"/><not-empty><fail-property resource="PartyUiLabels" property="PartyUserLoginMissingError"/></not-empty></process>
                <process field="PASSWORD"><copy to-field="currentPassword"/><not-empty><fail-property resource="PartyUiLabels" property="PartyPasswordMissing"/></not-empty></process>
                <process field="CONFIRM_PASSWORD">
                    <compare-field operator="equals" field="PASSWORD"><fail-property resource="PartyUiLabels" property="PartyPasswordMatchError"/></compare-field>                    
                    <copy to-field="currentPasswordVerify"/>
                </process>
                <process field="PASSWORD_HINT"><copy to-field="passwordHint"/></process>
            </simple-map-processor>
        </call-map-processor>
        <if-not-empty field="userLoginContext.userLoginId">
            <set from-field="userLoginContext.userLoginId" field="userLoginExistsMap.userLoginId"/>
            <find-by-primary-key entity-name="UserLogin" map="userLoginExistsMap" value-field="existingUserLogin"/>
            <if-not-empty field="existingUserLogin">
                <property-to-field field="tempErrorMessage" resource="PartyUiLabels" property="PartyUserNameInUse"/>
                <string-to-list string="${tempErrorMessage}" message-field="USERNAME" list="error_list"/>
            </if-not-empty>
        </if-not-empty>
        
        <make-value entity-name="UserLogin" value-field="newUserLogin"/>
        <set from-field="userLoginContext.userLoginId" field="newUserLogin.userLoginId"/>
        <set from-field="userLoginContext.currentPassword" field="newUserLogin.currentPassword"/>
        <set from-field="userLoginContext.passwordHint" field="newUserLogin.passwordHint"/>
        
        <!-- Check the password, etc for validity -->
        <call-bsh><![CDATA[
            String password = (String) userLoginContext.get("currentPassword");
            String confirmPassword = (String) userLoginContext.get("currentPasswordVerify");
            String passwordHint = (String) userLoginContext.get("passwordHint");
            org.ofbiz.common.login.LoginServices.checkNewPassword(newUserLogin, null, password, confirmPassword, passwordHint, error_list, true, locale);
        ]]></call-bsh>
        
        <!-- Create the Person -->
        <call-map-processor in-map-name="parameters" out-map-name="personContext">
            <simple-map-processor name="newPerson">
                <process field="USER_FIRST_NAME">
                    <copy to-field="firstName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyFirstNameMissing"/></not-empty>
                </process>
                <process field="USER_MIDDLE_NAME"><copy to-field="middleName"/></process>
                <process field="USER_LAST_NAME">
                    <copy to-field="lastName"/>
                    <not-empty><fail-property resource="PartyUiLabels" property="PartyLastNameMissingError"/></not-empty>
                </process>
                <process field="USER_TITLE"><copy to-field="personalTitle"/></process>
                <process field="USER_SUFFIX"><copy to-field="suffix"/></process>
                <process field="USER_BIRTHDATE">
                    <convert type="Date" to-field="birthDate"><fail-property resource="PartyUiLabels" property="PartyBirthDateMissingError"/></convert>
                </process>
                <process field="USER_GENDER"><copy to-field="gender"/></process>
            </simple-map-processor>
        </call-map-processor>
        
        <log level="info" message="Creating new customer, newUserLogin=${newUserLogin}"/>
        
        <!-- Create the PartyRole -->
        <set from-field="parameters.roleTypeId" field="partyRoleContext.roleTypeId"/>
        
        <!-- Create the email address -->
        
        <!-- Check for required E-Mail -->
        <if-compare field="parameters.REQUIRE_EMAIL" operator="not-equals" value="false">
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="roleTypeId"><copy/></process>
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <not-empty><fail-property resource="PartyUiLabels" property="PartyEmailAddressMissingError"/></not-empty>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        <else>
            <call-map-processor in-map-name="parameters" out-map-name="emailContext">
                <simple-map-processor name="newEmail">
                    <process field="roleTypeId"><copy/></process>
                    <process field="CUSTOMER_EMAIL">
                        <copy to-field="emailAddress"/>
                        <validate-method method="isEmail"><fail-property resource="PartyUiLabels" property="PartyEmailAddressNotFormattedCorrectly"/></validate-method>
                    </process>
                    <process field="CUSTOMER_EMAIL_ALLOW_SOL"><copy to-field="allowSolicitation"/></process>
                </simple-map-processor>
            </call-map-processor>
        </else>
        </if-compare>
        
        <!-- create the PartyDataSource entry to track where this info came from... -->
        <make-value entity-name="PartyDataSource" value-field="partyDataSource"/>
        <set value="ECOMMERCE_SITE" field="partyDataSource.dataSourceId"/>
        <set from-field="nowStamp" field="partyDataSource.fromDate"/>
        <set value="Y" field="partyDataSource.isCreate"/>
        <!-- get the visit from the session to get the visitId -->
        <session-to-field field="visit"/>
        <set from-field="visit.visitId" field="partyDataSource.visitId"/>
        
        <!-- now that everything is validated & setup, check to see if there are errors, then call the services -->
        <check-errors/>
        
        <set-service-fields map="personContext" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set-service-fields map="newUserLogin" service-name="createPersonAndUserLogin" to-map="personUserLoginContext"/>
        <set from-field="newUserLogin.currentPassword" field="personUserLoginContext.currentPasswordVerify"/>
        <!-- the above copy is okay since we checked already that they are the same -->
        <call-service service-name="createPersonAndUserLogin" in-map-name="personUserLoginContext">
            <result-to-field result-name="partyId" field="tempMap.partyId"/>
            <result-to-field field="createdUserLogin" result-name="newUserLogin"/>
        </call-service>
        <set-current-user-login value-field="createdUserLogin"/>
        
        <!-- create all necessary role -->
        <set from-field="systemUserLogin" field="partyRoleContext.userLogin"/>
        <set from-field="tempMap.partyId" field="partyRoleContext.partyId"/>
        <call-service service-name="createPartyRole" in-map-name="partyRoleContext" include-user-login="true"/>
        
        <set field="createBuyerRoleCtx.userLogin" from-field="systemUserLogin"/>
        <set field="createBuyerRoleCtx.partyId" from-field="tempMap.partyId"/>
        <set field="createBuyerRoleCtx.roleTypeId" value="BUYER"/>
        <call-service service-name="createPartyRole" in-map-name="createBuyerRoleCtx" include-user-login="true"/>
        
        <!-- email address -->
        <if-not-empty field="emailContext.emailAddress">
            <call-service service-name="createPartyEmailAddress" in-map-name="emailContext">
                <result-to-field result-name="contactMechId" field="emailPurposeContext.contactMechId"/>
            </call-service>
            <set from-field="tempMap.partyId" field="emailPurposeContext.partyId"/>
            <set value="PRIMARY_EMAIL" field="emailPurposeContext.contactMechPurposeTypeId"/>
            <call-service service-name="createPartyContactMechPurpose" in-map-name="emailPurposeContext"/>
        </if-not-empty>
        
        <!-- Associated to Product Store -->
        <set field="createProductStoreRoleMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductStoreRoleMap.partyId" from-field="tempMap.partyId"/>
        <set field="createProductStoreRoleMap.roleTypeId" from-field="parameters.roleTypeId"/>
        <set field="createProductStoreRoleMap.productStoreId" from-field="parameters.productStoreId"/>
        <call-service service-name="createProductStoreRole" in-map-name="createProductStoreRoleMap"/>
        
        <!-- send off the registration email -->
        <if-compare operator="equals" value="Y" field="parameters.sendEmail">
            <if-not-empty field="emailContext.emailAddress">
                <set from-field="parameters.productStoreId" field="storeEmailLookup.productStoreId"/>
                <set value="PRDS_CUST_REGISTER" field="storeEmailLookup.emailType"/>
                <find-by-primary-key map="storeEmailLookup" entity-name="ProductStoreEmailSetting"  value-field="storeEmail"/>
                <if-not-empty field="storeEmail.bodyScreenLocation">
                    <get-related-one value-field="createdUserLogin" relation-name="Person" to-value-field="person"/>
                    <set field="bodyParameters.person" from-field="person"/>
                    <set field="bodyParameters.username" from-field="parameters.USERNAME"/>
                    <set field="bodyParameters.password" from-field="parameters.PASSWORD"/>
                    <set field="bodyParameters.businessUser" from-field="parameters.businessUser"/>
                    <set field="bodyParameters.productStoreId" from-field="parameters.productStoreId"/>
                    <set field="emailParams.bodyParameters" from-field="bodyParameters"/>
                    <set field="emailParams.sendTo" from-field="emailContext.emailAddress"/>
                    <set field="emailParams.subject" from-field="storeEmail.subject"/>
                    <set field="emailParams.sendFrom" from-field="storeEmail.fromAddress"/>
                    <set field="emailParams.sendCc" from-field="storeEmail.ccAddress"/>
                    <set field="emailParams.sendBcc" from-field="storeEmail.bccAddress"/>
                    <set field="emailParams.contentType" from-field="storeEmail.contentType"/>
                    <set field="emailParams.bodyScreenUri" from-field="storeEmail.bodyScreenLocation"/>
                    <set field="emailParams.emailType" from-field="storeEmailLookup.emailType"/>
                    <call-service-asynch service-name="sendMailFromScreen" in-map-name="emailParams" include-user-login="true"/>
                </if-not-empty>
            </if-not-empty>
        </if-compare>
        
        <!-- tell the control servlet that we just logged in the user... -->
        <set value="TRUE" field="_LOGIN_PASSED_"/>
        <field-to-request field="_LOGIN_PASSED_"/>
        
        <field-to-result field="parameters.CUSTOMER_EMAIL" result-name="USERNAME"/>
        <field-to-result field="parameters.PASSWORD" result-name="PASSWORD"/>
        
        <if-compare field="parameters.businessUser" operator="equals" value="Y">
            <set field="tenantId" from-field="tempMap.partyId"/>
            
            <entity-one value-field="party" entity-name="Party">
                <field-map field-name="partyId" from-field="tempMap.partyId"/>
            </entity-one>
            <set field="party.isUnread" value="Y"/>
            <store-value value-field="party"/>
            
            <set field="createEmployeeRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createEmployeeRoleCtx.partyId" from-field="tempMap.partyId"/>
            <set field="createEmployeeRoleCtx.roleTypeId" value="EMPLOYEE"/>
            <call-service service-name="createPartyRole" in-map-name="createEmployeeRoleCtx" include-user-login="true"/>
            
            <!-- Create party group -->
            <set field="partyGroupCtx.userLogin" from-field="systemUserLogin"/>
            <set field="partyGroupCtx.groupName" from-field="parameters.officialBusinessName"/>
            <set field="partyGroupCtx.groupNameLocal" from-field="parameters.officialTradingName"/>
            <set field="partyGroupCtx.partyTypeId" value="PARTY_GROUP"/>
            <call-service service-name="createPartyGroup" in-map-name="partyGroupCtx">
                <result-to-field result-name="partyId" field="partyGroupPartyId"/>
            </call-service>
            
            <!-- Create organization role -->
            <set field="createOrganizationRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createOrganizationRoleCtx.partyId" from-field="partyGroupPartyId"/>
            <set field="createOrganizationRoleCtx.roleTypeId" value="INTERNAL_ORGANIZATIO"/>
            <call-service service-name="createPartyRole" in-map-name="createOrganizationRoleCtx"/>
            
            <!-- Create party relationship company and person -->
            <set field="partyRelationshipCtx.userLogin" from-field="systemUserLogin"/>
            <set field="partyRelationshipCtx.partyIdFrom" from-field="partyGroupPartyId"/>
            <set field="partyRelationshipCtx.partyIdTo" from-field="tempMap.partyId"/>
            <set field="partyRelationshipCtx.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <set field="partyRelationshipCtx.roleTypeIdTo" value="EMPLOYEE"/>
            <set field="partyRelationshipCtx.partyRelationshipTypeId" value="EMPLOYMENT"/>
            <call-service service-name="createPartyRelationship" in-map-name="partyRelationshipCtx"/>
            
            <set field="createSupplierRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createSupplierRoleCtx.partyId" from-field="partyGroupPartyId"/>
            <set field="createSupplierRoleCtx.roleTypeId" value="SUPPLIER"/>
            <call-service service-name="createPartyRole" in-map-name="createSupplierRoleCtx" include-user-login="true"/>
            
            <!-- Set domain name -->
            <if-compare field="parameters.checkDomain" operator="equals" value="Y">
                <set field="parameters.domainName" value="${parameters.ownDomainName}"/>
                <set field="parameters.domainNameBackend" value="backend.${parameters.ownDomainName}"/>
            <else>
                <set field="parameters.domainName" value="${parameters.freeDomainName}.shopmax.localhost"/>
                <set field="parameters.domainNameBackend" value="backend.${parameters.freeDomainName}.shopmax.localhost"/>
            </else>
            </if-compare>
            
            <set field="createPartyAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createPartyAttributeMap.partyId" from-field="tempMap.partyId"/>
            <set field="createPartyAttributeMap.attrName" value="DOMAIN_NAME"/>
            <set field="createPartyAttributeMap.attrValue" from-field="parameters.domainName"/>
            <call-service service-name="createPartyAttribute" in-map-name="createPartyAttributeMap"/>
            
            <!-- Create the contact phone number -->
            <if-not-empty field="parameters.contactPhoneNumber">
                <set field="homePhoneContext.contactNumber" from-field="parameters.contactPhoneNumber"/>
                <call-service service-name="createPartyTelecomNumber" in-map-name="homePhoneContext">
                    <result-to-field result-name="contactMechId" field="homePhonePurposeContext.contactMechId"/>
                </call-service>
                <set from-field="tempMap.partyId" field="homePhonePurposeContext.partyId"/>
                <set value="PRIMARY_PHONE" field="homePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="homePhonePurposeContext"/>
            </if-not-empty>
            
            <!-- Create the notification phone number -->
            <if-not-empty field="parameters.notificationPhoneNumber">
                <set field="mobilePhoneContext.contactNumber" from-field="parameters.notificationPhoneNumber"/>
                <call-service service-name="createPartyTelecomNumber" in-map-name="mobilePhoneContext">
                    <result-to-field result-name="contactMechId" field="mobilePhonePurposeContext.contactMechId"/>
                </call-service>
                <set from-field="tempMap.partyId" field="mobilePhonePurposeContext.partyId"/>
                <set value="PHONE_MOBILE" field="mobilePhonePurposeContext.contactMechPurposeTypeId"/>
                <call-service service-name="createPartyContactMechPurpose" in-map-name="mobilePhonePurposeContext"/>
            </if-not-empty>
            
            <set field="parameters.partyId" from-field="tempMap.partyId"/>
            
            <!-- Upload shop logo -->
            <if-not-empty field="parameters._uploadedFile_fileName">
                <set-service-fields service-name="uploadPartyContentFile"
                    map="parameters" to-map="uploadLogoMap"/>
                <set field="uploadLogoMap.userLogin" from-field="systemUserLogin"/>
                <set field="uploadLogoMap._uploadedFile_fileName" from-field="parameters._uploadedFile_fileName"/>
                <set field="uploadLogoMap.uploadedFile" from-field="parameters.uploadedFile"/>
                <set field="uploadLogoMap._uploadedFile_contentType" from-field="parameters._uploadedFile_contentType"/>
                <set field="uploadLogoMap.partyContentTypeId" value="LGOIMGURL"/>
                <set field="uploadLogoMap.isPublic" value="Y"/>
                <call-service service-name="uploadPartyContentFile" in-map-name="uploadLogoMap" break-on-error="false" />
            </if-not-empty>
            
            <!-- Create bank account -->
            <set field="createEftAccountMap.userLogin" from-field="systemUserLogin"/>
            <set field="createEftAccountMap.partyId" from-field="tempMap.partyId"/>
            <set field="createEftAccountMap.bankName" from-field="parameters.bankName"/>
            <set field="createEftAccountMap.nameOnAccount" from-field="parameters.nameOnAccount"/>
            <set field="createEftAccountMap.accountNumber" from-field="parameters.accountNumber"/>
            <set field="createEftAccountMap.routingNumber" from-field="parameters.routingNumber"/>
            <set field="createEftAccountMap.accountType" from-field="parameters.accountType"/>
            <call-service service-name="createEftAccount" in-map-name="createEftAccountMap"/>
            
            <set field="branchNameList" value="${groovy: if(parameters.physicalBranchName){physicalBranchName = parameters.physicalBranchName.split(&quot;/&quot;); return physicalBranchName.toList();}}" type="List"/>
            <set field="locationList" value="${groovy: if(parameters.physicalLocation){physicalLocation = parameters.physicalLocation.split(&quot;/&quot;); return physicalLocation.toList();}}" type="List"/>
            <set field="physicalPhones" value="${groovy: if(parameters.physicalPhone){physicalPhone = parameters.physicalPhone.split(&quot;/&quot;); return physicalPhone.toList();}}" type="List"/>
            <set field="physicalDateTimeList" value="${groovy: if(parameters.physicalTime){physicalTime = parameters.physicalTime.split(&quot;/&quot;); return physicalTime.toList();}}" type="List"/>
            <if-not-empty field="branchNameList">
                <loop count="${parameters.physicalNum}" field="i">
                    <set field="locationContext.userLogin" from-field="systemUserLogin"/>
                    <set field="locationContext.address1" from-field="locationList[i]"/>
                    <set field="locationContext.city" value="city"/>
                    <set field="locationContext.postalCode" value="00000"/>
                    <set field="locationContext.toName" from-field="branchNameList[i]"/>
                    <set field="locationContext.partyId" from-field="tempMap.partyId"/>
                    <call-service service-name="createPartyPostalAddress" in-map-name="locationContext">
                        <result-to-field result-name="contactMechId" field="addressPurposeContext.contactMechId"/>
                    </call-service>
                    <set field="addressPurposeContext.userLogin" from-field="systemUserLogin"/>
                    <set field="addressPurposeContext.partyId" from-field="tempMap.partyId"/>
                    <set field="addressPurposeContext.contactMechPurposeTypeId" value="PHYS_STORE_LOCATION"/>
                    <call-service service-name="createPartyContactMechPurpose" in-map-name="addressPurposeContext"/>
                    
                    <set field="physicalPhoneLists" value="${groovy: if(physicalPhones[i]){physicalPhones = physicalPhones[i].split(&quot;,&quot;); return physicalPhones.toList();}}" type="List"/>
                    <iterate entry="physicalPhoneList" list="physicalPhoneLists">
                        <set field="physicalPhone" value="${groovy: if(physicalPhoneList){physicalPhoneList = physicalPhoneList.split(&quot;-&quot;); return physicalPhoneList.toList();}}" type="List"/>
                        <set field="createStorePhoneNumberMap.contactMechId" from-field="addressPurposeContext.contactMechId"/>
                        <set field="createStorePhoneNumberMap.attrName" from-field="physicalPhone[0]"/>
                        <set field="createStorePhoneNumberMap.attrValue" from-field="physicalPhone[1]"/>
                        <set field="createStorePhoneNumberMap.userLogin" from-field="systemUserLogin"/>
                        <call-service service-name="createContactMechAttribute" in-map-name="createStorePhoneNumberMap"/>
                    </iterate>
                    
                    <set field="physicalDateTimes" value="${groovy: if(physicalDateTimeList[i]){physicalDateTimes = physicalDateTimeList[i].split(&quot;,&quot;); return physicalDateTimes.toList();}}" type="List"/>
                    <iterate entry="physicalDateTime" list="physicalDateTimes">
                        <set field="physicalDateTimeGroup" value="${groovy: if(physicalDateTime){physicalDateTimeGroups = physicalDateTime.split(&quot;-&quot;); return physicalDateTimeGroups.toList();}}" type="List"/>
                        <set field="createPhysicalDateTimeMap.contactMechId" from-field="addressPurposeContext.contactMechId"/>
                        <set field="createPhysicalDateTimeMap.day" from-field="physicalDateTimeGroup[0]"/>
                        <set field="createPhysicalDateTimeMap.openHour" from-field="physicalDateTimeGroup[1]"/>
                        <set field="createPhysicalDateTimeMap.openMin" from-field="physicalDateTimeGroup[2]"/>
                        <set field="createPhysicalDateTimeMap.closeHour" from-field="physicalDateTimeGroup[3]"/>
                        <set field="createPhysicalDateTimeMap.closeMin" from-field="physicalDateTimeGroup[4]"/>
                        <call-service service-name="createPhysicalDateTime" in-map-name="createPhysicalDateTimeMap"/>
                    </iterate>
                </loop>
            </if-not-empty>
            
            <!-- Upload driver license -->
            <if-not-empty field="parameters._uploadedFile1_fileName">
                <set-service-fields service-name="uploadPartyContentFile"
                    map="parameters" to-map="uploadDriverLicenseMap"/>
                <set field="uploadDriverLicenseMap.userLogin" from-field="systemUserLogin"/>
                <set field="uploadDriverLicenseMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
                <set field="uploadDriverLicenseMap.uploadedFile" from-field="parameters.uploadedFile1"/>
                <set field="uploadDriverLicenseMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
                <set field="uploadDriverLicenseMap.partyContentTypeId" value="INTERNAL"/>
                <set field="uploadDriverLicenseMap.isPublic" value="Y"/>
                <call-service service-name="uploadPartyContentFile" in-map-name="uploadDriverLicenseMap" break-on-error="false" />
            </if-not-empty>
            
            <!-- Create credit card or debit card -->
            <if-compare operator="equals" value="Y" field="parameters.paymentMethodOption">
                <set field="createCreditCardMap.userLogin" from-field="systemUserLogin"/>
                <set field="createCreditCardMap.partyId" from-field="tempMap.partyId"/>
                <set field="createCreditCardMap.firstNameOnCard" from-field="parameters.firstNameOnCard"/>
                <set field="createCreditCardMap.lastNameOnCard" from-field="parameters.lastNameOnCard"/>
                <set field="createCreditCardMap.cardType" value="visa"/>
                <set field="createCreditCardMap.cardNumber" from-field="parameters.cardNumber"/>
                <set field="createCreditCardMap.expireDate" from-field="parameters.expireDate"/>
                <!-- <set field="createCreditCardMap.cvc" from-field="parameters.cvc"/> -->
                <call-service service-name="createCreditCard" in-map-name="createCreditCardMap"/>
                <else>
                    <if-not-empty field="parameters._uploadedFile2_fileName">
                        <set-service-fields service-name="uploadPartyContentFile" map="parameters" to-map="uploadDebitFormMap"/>
                        <set field="uploadDebitFormMap.userLogin" from-field="systemUserLogin"/>
                        <set field="uploadDebitFormMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
                        <set field="uploadDebitFormMap.uploadedFile" from-field="parameters.uploadedFile2"/>
                        <set field="uploadDebitFormMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
                        <set field="uploadDebitFormMap.partyContentTypeId" value="INTERNAL"/>
                        <set field="uploadDebitFormMap.isPublic" value="Y"/>
                        <call-service service-name="uploadPartyContentFile" in-map-name="uploadDebitFormMap" break-on-error="false" />
                    </if-not-empty>
                </else>
            </if-compare>
            
            <!-- Create Tenant -->
            <make-value value-field="tenant" entity-name="Tenant"/>
            <set field="tenant.tenantId" from-field="tenantId"/>
            <set field="tenant.tenantName" from-field="parameters.officialBusinessName"/>
            <create-value value-field="tenant"/>
            
            <!-- Create Tenant Domain Name -->
            <make-value value-field="tenantDomainName" entity-name="TenantDomainName"/>
            <set field="tenantDomainName.tenantId" from-field="tenantId"/>
            <set field="tenantDomainName.domainName" from-field="parameters.domainName"/>
            <set field="tenantDomainName.initialPath" value="/"/>
            <create-value value-field="tenantDomainName"/>
            
            <!-- Create Tenant Backend Domain Name -->
            <make-value value-field="tenantDomainNameBackend" entity-name="TenantDomainName"/>
            <set field="tenantDomainNameBackend.tenantId" from-field="tenantId"/>
            <set field="tenantDomainNameBackend.domainName" from-field="parameters.domainNameBackend"/>
            <set field="tenantDomainNameBackend.initialPath" value="/catalog"/> 
            <create-value value-field="tenantDomainNameBackend"/>
            
            <!-- Create Tenant Component Shopmax -->
            <make-value value-field="tenantComponentShopmax" entity-name="TenantComponent"/>
            <set field="tenantComponentShopmax.tenantId" from-field="tenantId"/>
            <set field="tenantComponentShopmax.componentName" value="shopmax"/>
            <set field="tenantComponentShopmax.sequenceNum" value="01" type="Long"/>
            <create-value value-field="tenantComponentShopmax"/>
            
            <!-- Create Tenant Component Shopmax Seller -->
            <make-value value-field="tenantComponentShopmaxSeller" entity-name="TenantComponent"/>
            <set field="tenantComponentShopmaxSeller.tenantId" from-field="tenantId"/>
            <set field="tenantComponentShopmaxSeller.componentName" value="shopmaxseller"/>
            <set field="tenantComponentShopmaxSeller.sequenceNum" from-field="02" type="Long"/>
            <create-value value-field="tenantComponentShopmaxSeller"/>
         <else>
            <entity-and entity-name="PartyRole" list="partyRoles">
                <field-map field-name="roleTypeId" value="SELLER"/>
            </entity-and>
            <iterate entry="partyRole" list="partyRoles">
                <set field="createBuyerToSellerMap.tenantId" from-field="partyRole.partyId"/>
                <set field="createBuyerToSellerMap.partyId" from-field="tempMap.partyId"/>
                <call-service service-name="createBuyerToSeller" in-map-name="createBuyerToSellerMap"/>
            </iterate>
         </else>
         </if-compare>
    </simple-method>
    
    <simple-method method-name="uploadProductToSeller" short-description="Upload Product To Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <!-- Create product -->
        <set field="createProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductMap.productTypeId" value="FINISHED_GOOD"/>
        <set field="createProductMap.internalName" from-field="parameters.productName"/>
        <set field="createProductMap.productName" from-field="parameters.productName"/>
        <set field="createProductMap.longDescription" from-field="parameters.description"/>
        <call-service service-name="createProduct" in-map-name="createProductMap">
            <result-to-field result-name="productId" field="parameters.productId"/>
        </call-service>
        <field-to-result field="parameters.productId" result-name="productId"/>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._uploadedFile1_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile1"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="01" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile2_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile2"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="02" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile3_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile3"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile3_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile3_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="03" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile4_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile4"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile4_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile4_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="04" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <!-- Create product price -->
        <set field="createListPriceMap.userLogin" from-field="systemUserLogin"/>
        <set field="createListPriceMap.productId" from-field="parameters.productId"/>
        <set field="createListPriceMap.productPriceTypeId" value="LIST_PRICE"/>
        <set field="createListPriceMap.productPricePurposeId" value="PURCHASE"/>
        <set field="createListPriceMap.currencyUomId" value="NZD"/>
        <set field="createListPriceMap.productStoreGroupId" value="_NA_"/>
        <set field="createListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
        <call-service service-name="createProductPrice" in-map-name="createListPriceMap"/>
        
        <set-service-fields service-name="createProductPrice" to-map="createDefaultPriceMap" map="createListPriceMap"/>
        <set field="createDefaultPriceMap.productPriceTypeId" value="DEFAULT_PRICE"/>
        <call-service service-name="createProductPrice" in-map-name="createDefaultPriceMap"/>
        
        <if-not-empty field="parameters.promoPrice">
            <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
            <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
            <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
            <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
            <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
            <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
            <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
            <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
            <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
        </if-not-empty>
        
        <if-not-empty field="parameters.shippingSize">
            <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
            <set field="createProductAttributeMap.attrName" value="SHIPPING_SIZE"/>
            <set field="createProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
        </if-not-empty>
        
        <if-not-empty field="parameters.stock">
            <set field="receiveCtx.userLogin" from-field="systemUserLogin"/>
            <set field="receiveCtx.productId" from-field="parameters.productId"/>
            <set field="receiveCtx.facilityId" value="SellerWarehouse"/>
            <set field="receiveCtx.quantityAccepted" from-field="parameters.stock"/>
            <set field="receiveCtx.quantityRejected" value="0" type="BigDecimal"/>
            <set field="receiveCtx.inventoryItemTypeId" value="NON_SERIAL_INV_ITEM"/>
            <call-service service-name="receiveInventoryProduct" in-map-name="receiveCtx"/>
        </if-not-empty>
        
        <!-- Create product to category -->
        <set field="categoryLists" from-field="parameters.listCategory"/>
        <set field="categoryList" value="${groovy: categoryList = categoryLists.split(&quot;,&quot;); return categoryList.toList();}" type="List"/>
        <iterate entry="productCategoryId" list="categoryList" >
            <set field="createProductToCategoryMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductToCategoryMap.productCategoryId" from-field="productCategoryId"/>
            <set field="createProductToCategoryMap.productId" from-field="parameters.productId"/>
            <set field="createProductToCategoryMap.fromDate" from-field="nowTimestamp"/>
            <call-service service-name="safeAddProductToCategory" in-map-name="createProductToCategoryMap"/>
            
            <set field="setCategoryHasProductMap.productCategoryId" from-field="productCategoryId"/>
            <call-service service-name="setCategoryHasProduct" in-map-name="setCategoryHasProductMap"/>
        </iterate>
        
        <if-not-empty field="parameters.productSKU">
            <set field="createGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
            <set field="createGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
            <set field="createGoodIdentificationMap.productId" from-field="parameters.productId"/>
            <set field="createGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
            <call-service service-name="createGoodIdentification" in-map-name="createGoodIdentificationMap"/>
        </if-not-empty>
        
        <set field="success" value="true"/>
        <field-to-result field="success" result-name="uploadsuccess"/>
        
        <set field="parameters.partyId" from-field="userLogin.partyId"/>
        <set field="runTenantServiceInMap.tenantId" value="default"/>
        <set field="runTenantServiceInMap.serviceName" value="uploadProductToShopmax"/>
        <set field="runTenantServiceInMap.serviceParameters" from-field="parameters"/>
        <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
    </simple-method>
    
    <simple-method method-name="uploadProductToShopmax" short-description="Upload Product To Shopmax">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <!-- Create product -->
        <set field="createProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="createProductMap.productId" from-field="parameters.productId"/>
        <set field="createProductMap.productTypeId" value="FINISHED_GOOD"/>
        <set field="createProductMap.internalName" from-field="parameters.productName"/>
        <set field="createProductMap.productName" from-field="parameters.productName"/>
        <set field="createProductMap.longDescription" from-field="parameters.description"/>
        <set field="createProductMap.requirementMethodEnumId" value="PRODRQM_DS"/>
        <call-service service-name="createProduct" in-map-name="createProductMap"/>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._uploadedFile1_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile1"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="01" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile2_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile2"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="02" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile3_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile3"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile3_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile3_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="03" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile4_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile4"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile4_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile4_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="04" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <!-- Create product price -->
        <set field="createListPriceMap.userLogin" from-field="systemUserLogin"/>
        <set field="createListPriceMap.productId" from-field="parameters.productId"/>
        <set field="createListPriceMap.productPriceTypeId" value="LIST_PRICE"/>
        <set field="createListPriceMap.productPricePurposeId" value="PURCHASE"/>
        <set field="createListPriceMap.currencyUomId" value="NZD"/>
        <set field="createListPriceMap.productStoreGroupId" value="_NA_"/>
        <set field="createListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
        <call-service service-name="createProductPrice" in-map-name="createListPriceMap"/>
        
        <set-service-fields service-name="createProductPrice" to-map="createDefaultPriceMap" map="createListPriceMap"/>
        <set field="createDefaultPriceMap.productPriceTypeId" value="DEFAULT_PRICE"/>
        <call-service service-name="createProductPrice" in-map-name="createDefaultPriceMap"/>
        
        <if-not-empty field="parameters.promoPrice">
            <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
            <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
            <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
            <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
            <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
            <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
            <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
            <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
            <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
        </if-not-empty>
        
        <if-not-empty field="parameters.shippingSize">
            <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
            <set field="createProductAttributeMap.attrName" value="SHIPPING_SIZE"/>
            <set field="createProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
        </if-not-empty>
        
        <entity-and list="partyRelationships" entity-name="PartyRelationship" filter-by-date="true">
            <field-map field-name="partyIdTo" from-field="parameters.partyId"/>
            <field-map field-name="roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <field-map field-name="roleTypeIdTo" value="EMPLOYEE"/>
            <field-map field-name="partyRelationshipTypeId" value="EMPLOYMENT"/>
        </entity-and>
        <if-not-empty field="partyRelationships">
            <first-from-list entry="partyRelationship" list="partyRelationships"/>
            <set field="createSupplierProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="createSupplierProductMap.productId" from-field="parameters.productId"/>
            <set field="createSupplierProductMap.partyId" from-field="partyRelationship.partyIdFrom"/>
            <set field="createSupplierProductMap.availableFromDate" from-field="nowTimestamp"/>
            <set field="createSupplierProductMap.minimumOrderQuantity" value="0" type="BigDecimal"/>
            <set field="createSupplierProductMap.lastPrice" from-field="parameters.listingPrice" type="BigDecimal"/>
            <set field="createSupplierProductMap.currencyUomId" value="NZD"/>
            <set field="createSupplierProductMap.supplierProductName" from-field="parameters.productName"/>
            <set field="createSupplierProductMap.supplierProductId" from-field="parameters.productId"/>
            <set field="createSupplierProductMap.canDropShip" value="Y"/>
            <call-service service-name="createSupplierProduct" in-map-name="createSupplierProductMap"/>
            
            <if-not-empty field="parameters.stock">
                <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
                <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
                <set field="createProductAttributeMap.attrName" value="STOCK"/>
                <set field="createProductAttributeMap.attrValue" from-field="parameters.stock"/>
                <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
            </if-not-empty>
        </if-not-empty>
        
        <!-- Create product to category -->
        <set field="categoryLists" from-field="parameters.listCategory"/>
        <set field="categoryList" value="${groovy: categoryList = categoryLists.split(&quot;,&quot;); return categoryList.toList();}" type="List"/>
        <iterate entry="productCategoryId" list="categoryList" >
            <set field="createProductToCategoryMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductToCategoryMap.productCategoryId" from-field="productCategoryId"/>
            <set field="createProductToCategoryMap.productId" from-field="parameters.productId"/>
            <set field="createProductToCategoryMap.fromDate" from-field="nowTimestamp"/>
            <call-service service-name="safeAddProductToCategory" in-map-name="createProductToCategoryMap"/>
            
            <set field="setCategoryHasProductMap.productCategoryId" from-field="productCategoryId"/>
            <call-service service-name="setCategoryHasProduct" in-map-name="setCategoryHasProductMap"/>
        </iterate>
        
        <if-not-empty field="parameters.productSKU">
            <set field="createGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
            <set field="createGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
            <set field="createGoodIdentificationMap.productId" from-field="parameters.productId"/>
            <set field="createGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
            <call-service service-name="createGoodIdentification" in-map-name="createGoodIdentificationMap"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="approveShopmaxSeller" short-description="Approve Shopmax Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <set field="createSellerRoleCtx.userLogin" from-field="systemUserLogin"/>
        <set field="createSellerRoleCtx.partyId" from-field="parameters.partyId"/>
        <set field="createSellerRoleCtx.roleTypeId" value="SELLER"/>
        <call-service service-name="createPartyRole" in-map-name="createSellerRoleCtx" include-user-login="true"/>
        
        <entity-and list="userLoginSelllerList" entity-name="UserLogin">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-and>
        <iterate entry="userLoginSelller" list="userLoginSelllerList">
            <set field="addSellerSecurityGroupMap.userLogin" from-field="systemUserLogin"/>
            <set field="addSellerSecurityGroupMap.userLoginId" from-field="userLoginSelller.userLoginId"/>
            <set field="addSellerSecurityGroupMap.groupId" value="SHOPMAX_SELLER"/>
            <call-service service-name="addUserLoginToSecurityGroup" in-map-name="addSellerSecurityGroupMap"/>
        </iterate>
        
        <entity-one value-field="party" entity-name="Party">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-one>
        <set field="party.isUnread" value="N"/>
        <store-value value-field="party"/>
        <field-to-result field="parameters.partyId" result-name="partyId"/>
    </simple-method>
    
    <simple-method method-name="createTenantForSeller" short-description="Create Tenant For Seller">
        <set field="tenantId" from-field="parameters.partyId"/>
        
        <!-- Create Tenant Data Sources -->
        <property-to-field resource="tenant" property="jdbcUriPrefix" field="jdbcUriPrefix"/>
        <property-to-field resource="tenant" property="jdbcUriSuffix" field="jdbcUriSuffix"/>
        <property-to-field resource="tenant" property="jdbcPassword" field="jdbcPassword"/>
        <property-to-field resource="tenant" property="isDemo" field="isDemo"/>
        
        <call-object-method obj-field="tenantId" method-name="toLowerCase" ret-field="jdbcUsername"/>
        
        <set field="databaseNamePrefix" value="shopmax"/>
         
        <!-- org.ofbiz -->
        <set field="ofbizEntityGroupName" value="org.ofbiz"/>
        
        <!-- remove if exists -->
        <entity-one value-field="existOfbizDataSource" entity-name="TenantDataSource">
            <field-map field-name="tenantId" from-field="tenantId"/>
            <field-map field-name="entityGroupName" from-field="ofbizEntityGroupName"/>
        </entity-one>
        <if-not-empty field="existOfbizDataSource">
            <remove-value value-field="existOfbizDataSource"/>
        </if-not-empty>
        
        <make-value value-field="tenantDataSource" entity-name="TenantDataSource"/>
        <set field="tenantDataSource.tenantId" from-field="tenantId"/>
        <set field="tenantDataSource.entityGroupName" from-field="ofbizEntityGroupName"/>
        <set field="tenantDataSource.jdbcUri" value="${jdbcUriPrefix}${databaseNamePrefix}${tenantId}ofbiz${jdbcUriSuffix}"/>
        <if-compare operator="equals" value="Y" field="isDemo">
            <property-to-field resource="tenantDemo" property="jdbcUsername" field="demoJdbcUsername"/>
            <property-to-field resource="tenantDemo" property="jdbcPassword" field="demoJdbcPassword"/>
            <set field="tenantDataSource.jdbcUsername" from-field="demoJdbcUsername"/>
            <set field="tenantDataSource.jdbcPassword" from-field="demoJdbcPassword"/>
            <else>
                <set field="tenantDataSource.jdbcUsername" from-field="jdbcUsername"/>
                <set field="tenantDataSource.jdbcPassword" from-field="jdbcPassword"/>
            </else>
        </if-compare>
        <create-value value-field="tenantDataSource"/>
        
        <!-- org.ofbiz.olap -->
        <set field="olapEntityGroupName" value="org.ofbiz.olap"/>
        
        <!-- remove if exists -->
        <entity-one value-field="existOlapDataSource" entity-name="TenantDataSource">
            <field-map field-name="tenantId" from-field="tenantId"/>
            <field-map field-name="entityGroupName" from-field="olapEntityGroupName"/>
        </entity-one>
        <if-not-empty field="existOlapDataSource">
            <remove-value value-field="existOlapDataSource"/>
        </if-not-empty>
        
        <make-value value-field="tenantDataSourceOlap" entity-name="TenantDataSource"/>
        <set field="tenantDataSourceOlap.tenantId" from-field="tenantId"/>
        <set field="tenantDataSourceOlap.entityGroupName" from-field="olapEntityGroupName"/>
        <set field="tenantDataSourceOlap.jdbcUri" value="${jdbcUriPrefix}${databaseNamePrefix}${tenantId}olap${jdbcUriSuffix}"/>
        <if-compare operator="equals" value="Y" field="isDemo">
        <property-to-field resource="tenantDemo" property="jdbcUsername" field="demoJdbcUsername"/>
        <property-to-field resource="tenantDemo" property="jdbcPassword" field="demoJdbcPassword"/>
        <set field="tenantDataSourceOlap.jdbcUsername" from-field="demoJdbcUsername"/>
        <set field="tenantDataSourceOlap.jdbcPassword" from-field="demoJdbcPassword"/>
        <else>
            <set field="tenantDataSourceOlap.jdbcUsername" from-field="jdbcUsername"/>
            <set field="tenantDataSourceOlap.jdbcPassword" from-field="jdbcPassword"/>
        </else>
        </if-compare>
        <create-value value-field="tenantDataSourceOlap"/>
        <field-to-result field="parameters.partyId" result-name="partyId"/>
    </simple-method>
    
    <simple-method method-name="updateWebsiteForSeller" short-description="Update Website For Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <set field="tenantId" from-field="parameters.partyId"/>
        
        <!-- Update tenant website's hosts -->
        <script>groovy:
            import org.ofbiz.entity.DelegatorFactory;
            def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
            def tenantDomainNames = tenantDelegator.findByAnd("TenantDomainName", ["tenantId" : tenantId], null, false);
            tenantDomainNames.each { tenantDomainName ->
                if ("/shop".equals(tenantDomainName.initialPath)) {
                    frontendDomainName = tenantDomainName.domainName;
                } else {
                    backendDomainName = tenantDomainName.domainName;
                }
            }
            def tenantSellerWebSite = tenantDelegator.findOne("WebSite", ["webSiteId" : "SHOPMAX_SELLER"], false);
            tenantSellerWebSite.httpHost = frontendDomainName;
            tenantSellerWebSite.httpsHost = frontendDomainName;
            //tenantSellerWebSite.standardContentPrefix = "http://" + backendDomainName + ":" + tenantSellerWebSite.httpPort;
            //tenantSellerWebSite.secureContentPrefix = "https://" + backendDomainName + ":" + tenantSellerWebSite.httpsPort;
            tenantDelegator.store(tenantSellerWebSite);
        </script>
        <field-to-result field="parameters.partyId" result-name="partyId"/>
    </simple-method>
    
    <simple-method method-name="createPersonAndCompanyToSeller" short-description="Create Person And Company To Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <set field="tenantId" from-field="parameters.partyId"/>
        
        <entity-one value-field="party" entity-name="Party">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-one>
        
        <entity-one value-field="person" entity-name="Person">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-one>
        
        <entity-and list="userLoginSellers" entity-name="UserLogin">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-and>
        <first-from-list entry="userLoginSeller" list="userLoginSellers"/>
        
        <script>groovy:
            import org.ofbiz.entity.DelegatorFactory;
            def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
            def tenantParty = tenantDelegator.makeValue("Party");
            tenantParty = party;
            tenantDelegator.create(tenantParty);
            
            def tenantPerson = tenantDelegator.makeValue("Person");
            tenantPerson = person;
            tenantDelegator.create(tenantPerson);
            
            def tenantUserLogin = tenantDelegator.makeValue("UserLogin");
            tenantUserLogin = userLoginSeller;
            tenantDelegator.create(tenantUserLogin);
        </script>
        
        <entity-one value-field="partyAttribute" entity-name="PartyAttribute">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="attrName" value="DOMAIN_NAME"/>
        </entity-one>
        <if-not-empty field="partyAttribute">
            <set field="createPartyAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createPartyAttributeMap.partyId" from-field="parameters.partyId"/>
            <set field="createPartyAttributeMap.attrName" value="DOMAIN_NAME"/>
            <set field="createPartyAttributeMap.attrValue" from-field="partyAttribute.attrValue"/>
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="createPartyAttribute"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="createPartyAttributeMap"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
        </if-not-empty>
        
        <entity-and list="partyRelationships" entity-name="PartyRelationship" filter-by-date="true">
            <field-map field-name="partyIdTo" from-field="parameters.partyId"/>
            <field-map field-name="roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <field-map field-name="roleTypeIdTo" value="EMPLOYEE"/>
            <field-map field-name="partyRelationshipTypeId" value="EMPLOYMENT"/>
        </entity-and>
        <if-not-empty field="partyRelationships">
            <first-from-list entry="partyRelationship" list="partyRelationships"/>
            <set field="partyGroupPartyId" from-field="partyRelationship.partyIdFrom"/>
            <entity-one value-field="partyPartyGroup" entity-name="Party">
                <field-map field-name="partyId" from-field="partyGroupPartyId"/>
            </entity-one>
            <entity-one value-field="partyGroup" entity-name="PartyGroup">
                <field-map field-name="partyId" from-field="partyGroupPartyId"/>
            </entity-one>
            
            <set field="createCustomerRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createCustomerRoleCtx.partyId" from-field="parameters.partyId"/>
            <set field="createCustomerRoleCtx.roleTypeId" value="CUSTOMER"/>
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="createPartyRole"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="createCustomerRoleCtx"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            
            <set field="createSellerRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createSellerRoleCtx.partyId" from-field="parameters.partyId"/>
            <set field="createSellerRoleCtx.roleTypeId" value="SELLER"/>
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="createPartyRole"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="createSellerRoleCtx"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            
            <set field="createEmployeeRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createEmployeeRoleCtx.partyId" from-field="parameters.partyId"/>
            <set field="createEmployeeRoleCtx.roleTypeId" value="EMPLOYEE"/>
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="createPartyRole"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="createEmployeeRoleCtx"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            
            <!-- Create party group -->
            <script>groovy:
                import org.ofbiz.entity.DelegatorFactory;
                def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
                def tenantParty = tenantDelegator.makeValue("Party");
                tenantParty = partyPartyGroup;
                tenantDelegator.create(tenantParty);
                
                def tenantPartyGroup = tenantDelegator.makeValue("PartyGroup");
                tenantPartyGroup = partyGroup;
                tenantDelegator.create(tenantPartyGroup);
                
                def tenantProductStore = tenantDelegator.findOne("ProductStore", ["productStoreId" : "ShopMaxSellerStore"], false);
                tenantProductStore.payToPartyId = partyGroupPartyId;
                tenantDelegator.store(tenantProductStore);
                
                def tenantFacility = tenantDelegator.findOne("Facility", ["facilityId" : "SellerWarehouse"], false);
                tenantFacility.ownerPartyId = partyGroupPartyId;
                tenantDelegator.store(tenantFacility);
            </script>
            
            <!-- Create organization role -->
            <set field="createOrganizationRoleCtx.userLogin" from-field="systemUserLogin"/>
            <set field="createOrganizationRoleCtx.partyId" from-field="partyGroupPartyId"/>
            <set field="createOrganizationRoleCtx.roleTypeId" value="INTERNAL_ORGANIZATIO"/>
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="createPartyRole"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="createOrganizationRoleCtx"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            
            <!-- Create party relationship company and person -->
            <set field="partyRelationshipCtx.userLogin" from-field="systemUserLogin"/>
            <set field="partyRelationshipCtx.partyIdFrom" from-field="partyGroupPartyId"/>
            <set field="partyRelationshipCtx.partyIdTo" from-field="parameters.partyId"/>
            <set field="partyRelationshipCtx.roleTypeIdFrom" value="INTERNAL_ORGANIZATIO"/>
            <set field="partyRelationshipCtx.roleTypeIdTo" value="EMPLOYEE"/>
            <set field="partyRelationshipCtx.partyRelationshipTypeId" value="EMPLOYMENT"/>
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="createPartyRelationship"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="partyRelationshipCtx"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            
            <!-- Create email address -->
            <entity-and list="emailAddressList" entity-name="PartyContactDetailByPurpose" filter-by-date="true">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            </entity-and>
            <if-not-empty field="emailAddressList">
                <first-from-list entry="emailAddress" list="emailAddressList"/>
                <entity-one value-field="emailAddressContactMech" entity-name="ContactMech">
                    <field-map field-name="contactMechId" from-field="emailAddress.contactMechId"/>
                </entity-one>
                <entity-and list="emailAddressPartyContactMechs" entity-name="PartyContactMech">
                    <field-map field-name="partyId" from-field="parameters.partyId"/>
                    <field-map field-name="contactMechId" from-field="emailAddress.contactMechId"/>
                </entity-and>
                <first-from-list entry="emailAddressPartyContactMech" list="emailAddressPartyContactMechs"/>
                <script>groovy:
                    import org.ofbiz.entity.DelegatorFactory;
                    def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
                    def tenantContactMech = tenantDelegator.makeValue("ContactMech");
                    tenantContactMech = emailAddressContactMech;
                    tenantDelegator.create(tenantContactMech);
                    
                    def tenantPartyContactMech = tenantDelegator.makeValue("PartyContactMech");
                    tenantPartyContactMech = emailAddressPartyContactMech;
                    tenantDelegator.create(tenantPartyContactMech);
                </script>
                
                <set field="emailPurposeContext.userLogin" from-field="systemUserLogin"/>
                <set field="emailPurposeContext.partyId" from-field="parameters.partyId"/>
                <set field="emailPurposeContext.contactMechId" from-field="emailAddress.contactMechId"/>
                <set field="emailPurposeContext.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
                <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
                <set field="runTenantServiceInMap.serviceName" value="createPartyContactMechPurpose"/>
                <set field="runTenantServiceInMap.serviceParameters" from-field="emailPurposeContext"/>
                <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            </if-not-empty>
            
            <!-- Create the contact phone number -->
            <entity-and list="contactPhoneNumberList" entity-name="PartyContactDetailByPurpose" filter-by-date="true">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="contactMechPurposeTypeId" value="PRIMARY_PHONE"/>
            </entity-and>
            <if-not-empty field="contactPhoneNumberList">
                <first-from-list entry="contactPhoneNumber" list="contactPhoneNumberList"/>
                <entity-one value-field="contactPhoneNumberContactMech" entity-name="ContactMech">
                    <field-map field-name="contactMechId" from-field="contactPhoneNumber.contactMechId"/>
                </entity-one>
                <entity-and list="contactPhoneNumberPartyContactMechs" entity-name="PartyContactMech">
                    <field-map field-name="partyId" from-field="parameters.partyId"/>
                    <field-map field-name="contactMechId" from-field="contactPhoneNumber.contactMechId"/>
                </entity-and>
                <first-from-list entry="contactPhoneNumberPartyContactMech" list="contactPhoneNumberPartyContactMechs"/>
                <script>groovy:
                    import org.ofbiz.entity.DelegatorFactory;
                    def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
                    def tenantContactMech = tenantDelegator.makeValue("ContactMech");
                    tenantContactMech = contactPhoneNumberContactMech;
                    tenantDelegator.create(tenantContactMech);
                    
                    def tenantPartyContactMech = tenantDelegator.makeValue("PartyContactMech");
                    tenantPartyContactMech = contactPhoneNumberPartyContactMech;
                    tenantDelegator.create(tenantPartyContactMech);
                </script>
                
                <set field="homePhonePurposeContext.userLogin" from-field="systemUserLogin"/>
                <set field="homePhonePurposeContext.partyId" from-field="parameters.partyId"/>
                <set field="homePhonePurposeContext.contactMechId" from-field="contactPhoneNumber.contactMechId"/>
                <set field="homePhonePurposeContext.contactMechPurposeTypeId" value="PRIMARY_PHONE"/>
                <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
                <set field="runTenantServiceInMap.serviceName" value="createPartyContactMechPurpose"/>
                <set field="runTenantServiceInMap.serviceParameters" from-field="homePhonePurposeContext"/>
                <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            </if-not-empty>
            
            <!-- Create the notification phone number -->
            <entity-and list="notificationPhoneNumberList" entity-name="PartyContactDetailByPurpose" filter-by-date="true">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="contactMechPurposeTypeId" value="PHONE_MOBILE"/>
            </entity-and>
            <if-not-empty field="notificationPhoneNumberList">
                <first-from-list entry="notificationPhoneNumber" list="notificationPhoneNumberList"/>
                <entity-one value-field="notificationPhoneNumberContactMech" entity-name="ContactMech">
                    <field-map field-name="contactMechId" from-field="notificationPhoneNumber.contactMechId"/>
                </entity-one>
                <entity-and list="notificationPhoneNumberPartyContactMechs" entity-name="PartyContactMech">
                    <field-map field-name="partyId" from-field="parameters.partyId"/>
                    <field-map field-name="contactMechId" from-field="notificationPhoneNumber.contactMechId"/>
                </entity-and>
                <first-from-list entry="notificationPhoneNumberPartyContactMech" list="notificationPhoneNumberPartyContactMechs"/>
                <script>groovy:
                    import org.ofbiz.entity.DelegatorFactory;
                    def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
                    def tenantContactMech = tenantDelegator.makeValue("ContactMech");
                    tenantContactMech = notificationPhoneNumberContactMech;
                    tenantDelegator.create(tenantContactMech);
                    
                    def tenantPartyContactMech = tenantDelegator.makeValue("PartyContactMech");
                    tenantPartyContactMech = notificationPhoneNumberPartyContactMech;
                    tenantDelegator.create(tenantPartyContactMech);
                </script>
                
                <set field="mobilePhonePurposeContext.userLogin" from-field="systemUserLogin"/>
                <set field="mobilePhonePurposeContext.partyId" from-field="parameters.partyId"/>
                <set field="mobilePhonePurposeContext.contactMechId" from-field="notificationPhoneNumber.contactMechId"/>
                <set field="mobilePhonePurposeContext.contactMechPurposeTypeId" value="PHONE_MOBILE"/>
                <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
                <set field="runTenantServiceInMap.serviceName" value="createPartyContactMechPurpose"/>
                <set field="runTenantServiceInMap.serviceParameters" from-field="mobilePhonePurposeContext"/>
                <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            </if-not-empty>
            
            <entity-and list="userLoginSelllerList" entity-name="UserLogin">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
            </entity-and>
            <if-not-empty field="userLoginSelllerList">
                <first-from-list entry="userLoginSelller" list="userLoginSelllerList"/>
                <set field="addSellerSecurityGroupMap.userLogin" from-field="systemUserLogin"/>
                <set field="addSellerSecurityGroupMap.userLoginId" from-field="userLoginSelller.userLoginId"/>
                <set field="addSellerSecurityGroupMap.groupId" value="SHOPMAX_SELLER"/>
                <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
                <set field="runTenantServiceInMap.serviceName" value="addUserLoginToSecurityGroup"/>
                <set field="runTenantServiceInMap.serviceParameters" from-field="addSellerSecurityGroupMap"/>
                <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
            </if-not-empty>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="setCategoryHasProduct" short-description="Set Category Has Product">
        <entity-one value-field="productCategory" entity-name="ProductCategory">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
        </entity-one>
        <set field="productCategory.showInSelect" value="Y"/>
        <store-value value-field="productCategory"/>
        <entity-and list="productCategoryRollups" entity-name="ProductCategoryRollup">
            <field-map field-name="productCategoryId" from-field="parameters.productCategoryId"/>
        </entity-and>
        <iterate entry="productCategoryRollup" list="productCategoryRollups">
            <set field="setCategoryHasProductMap.productCategoryId" from-field="productCategoryRollup.parentProductCategoryId"/>
            <call-service service-name="setCategoryHasProduct" in-map-name="setCategoryHasProductMap"/>
        </iterate>
    </simple-method>
    
    <simple-method method-name="editProductToSeller" short-description="Edit Product To Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <set field="updateProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="updateProductMap.productId" from-field="parameters.productId"/>
        <set field="updateProductMap.internalName" from-field="parameters.productName"/>
        <set field="updateProductMap.productName" from-field="parameters.productName"/>
        <set field="updateProductMap.longDescription" from-field="parameters.description"/>
        <call-service service-name="updateProduct" in-map-name="updateProductMap"/>
        
        <field-to-result field="parameters.productCategoryId" result-name="productCategoryId"/>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._uploadedFile1_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile1"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="01" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile2_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile2"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="02" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile3_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile3"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile3_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile3_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="03" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile4_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile4"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile4_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile4_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="04" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <entity-and list="productListPriceList" entity-name="ProductPrice">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productPriceTypeId" value="LIST_PRICE"/>
            <field-map field-name="productPricePurposeId" value="PURCHASE"/>
            <field-map field-name="currencyUomId" value="NZD"/>
            <field-map field-name="productStoreGroupId" value="_NA_"/>
        </entity-and>
        <if-empty field="productListPriceList">
            <set field="createListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="createListPriceMap.productId" from-field="parameters.productId"/>
            <set field="createListPriceMap.currencyUomId" value="NZD"/>
            <set field="createListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <set field="createListPriceMap.productStoreGroupId" value="_NA_"/>
            <set field="createListPriceMap.productPricePurposeId" value="PURCHASE"/>
            <set field="createListPriceMap.productPriceTypeId" value="LIST_PRICE"/>
            <call-service service-name="createProductPrice" in-map-name="createListPriceMap"/>
            
            <set-service-fields service-name="createProductPrice" to-map="createDefaultPriceMap" map="createListPriceMap"/>
            <set field="createDefaultPriceMap.productPriceTypeId" value="DEFAULT_PRICE"/>
            <call-service service-name="createProductPrice" in-map-name="createDefaultPriceMap"/>
        <else>
            <first-from-list entry="productListPrice" list="productListPriceList"/>
            <set field="updateListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateListPriceMap.productId" from-field="productListPrice.productId"/>
            <set field="updateListPriceMap.productPriceTypeId" from-field="productListPrice.productPriceTypeId"/>
            <set field="updateListPriceMap.productPricePurposeId" from-field="productListPrice.productPricePurposeId"/>
            <set field="updateListPriceMap.currencyUomId" from-field="productListPrice.currencyUomId"/>
            <set field="updateListPriceMap.productStoreGroupId" from-field="productListPrice.productStoreGroupId"/>
            <set field="updateListPriceMap.fromDate" from-field="productListPrice.fromDate"/>
            <set field="updateListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <call-service service-name="updateProductPrice" in-map-name="updateListPriceMap"/>
            
            <entity-and list="productDefaultPriceList" entity-name="ProductPrice">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productPriceTypeId" value="DEFAULT_PRICE"/>
                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
                <field-map field-name="currencyUomId" value="NZD"/>
                <field-map field-name="productStoreGroupId" value="_NA_"/>
            </entity-and>
            <if-not-empty field="productDefaultPriceList">
                <first-from-list entry="productDefaultPrice" list="productDefaultPriceList"/>
                <set field="updateDefaultPriceMap.userLogin" from-field="systemUserLogin"/>
                <set field="updateDefaultPriceMap.productId" from-field="productDefaultPrice.productId"/>
                <set field="updateDefaultPriceMap.productPriceTypeId" from-field="productDefaultPrice.productPriceTypeId"/>
                <set field="updateDefaultPriceMap.productPricePurposeId" from-field="productDefaultPrice.productPricePurposeId"/>
                <set field="updateDefaultPriceMap.currencyUomId" from-field="productDefaultPrice.currencyUomId"/>
                <set field="updateDefaultPriceMap.productStoreGroupId" from-field="productDefaultPrice.productStoreGroupId"/>
                <set field="updateDefaultPriceMap.fromDate" from-field="productDefaultPrice.fromDate"/>
                <set field="updateDefaultPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
                <call-service service-name="updateProductPrice" in-map-name="updateDefaultPriceMap"/>
            </if-not-empty>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.promoPrice">
            <entity-and list="productPromoPriceList" entity-name="ProductPrice">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
                <field-map field-name="currencyUomId" value="NZD"/>
                <field-map field-name="productStoreGroupId" value="_NA_"/>
            </entity-and>
            <if-empty field="productPromoPriceList">
                <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
            <else>
                <first-from-list entry="productPromoPrice" list="productPromoPriceList"/>
                <if-compare-field to-field="productPromoPrice.fromDate" operator="equals" field="parameters.promoPriceFromDate" type="Timestamp">
                    <set field="updatePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="updatePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="updatePromoPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="updatePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="updatePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="updatePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="updatePromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="updatePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <set field="updatePromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="updateProductPrice" in-map-name="updatePromoPriceMap"/>
                <else>
                    <set field="deletePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="deletePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="deleteProductPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="deletePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="deletePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="deletePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="deletePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <call-service service-name="deleteProductPrice" in-map-name="deletePromoPriceMap"/>
                    
                    <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                    <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                    <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                    <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                    <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                    <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                    <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
                </else>
                </if-compare-field>
            </else>
            </if-empty>
        </if-not-empty>
        
        <entity-one value-field="productAttribute" entity-name="ProductAttribute">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="attrName" value="SHIPPING_SIZE"/>
        </entity-one>
        <if-empty field="productAttribute">
            <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
            <set field="createProductAttributeMap.attrName" value="SHIPPING_SIZE"/>
            <set field="createProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
        <else>
            <set field="updateProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateProductAttributeMap.productId" from-field="productAttribute.productId"/>
            <set field="updateProductAttributeMap.attrName" from-field="productAttribute.attrName"/>
            <set field="updateProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="updateProductAttribute" in-map-name="updateProductAttributeMap"/>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.productSKU">
            <entity-one value-field="goodIdentification" entity-name="GoodIdentification">
                <field-map field-name="goodIdentificationTypeId" value="SKU"/>
                <field-map field-name="productId" from-field="parameters.productId"/>
            </entity-one>
            <if-empty field="goodIdentification">
                <set field="createGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="createGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="createGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="createGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="createGoodIdentification" in-map-name="createGoodIdentificationMap"/>
            <else>
                <set field="updateGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="updateGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="updateGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="updateGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="updateGoodIdentification" in-map-name="updateGoodIdentificationMap"/>
            </else>
            </if-empty>
        </if-not-empty>
        
        <set field="parameters.partyId" from-field="userLogin.partyId"/>
        <set field="runTenantServiceInMap.tenantId" value="default"/>
        <set field="runTenantServiceInMap.serviceName" value="editProductToShopmax"/>
        <set field="runTenantServiceInMap.serviceParameters" from-field="parameters"/>
        <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
    </simple-method>
    
    <simple-method method-name="editProductToShopmax" short-description="Edit Product To Shopmax">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <set field="updateProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="updateProductMap.productId" from-field="parameters.productId"/>
        <set field="updateProductMap.internalName" from-field="parameters.productName"/>
        <set field="updateProductMap.productName" from-field="parameters.productName"/>
        <set field="updateProductMap.longDescription" from-field="parameters.description"/>
        <call-service service-name="updateProduct" in-map-name="updateProductMap"/>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._uploadedFile1_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile1"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="01" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile2_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile2"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="02" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile3_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile3"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile3_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile3_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="03" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile4_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile4"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile4_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile4_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="04" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <entity-and list="productListPriceList" entity-name="ProductPrice">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productPriceTypeId" value="LIST_PRICE"/>
            <field-map field-name="productPricePurposeId" value="PURCHASE"/>
            <field-map field-name="currencyUomId" value="NZD"/>
            <field-map field-name="productStoreGroupId" value="_NA_"/>
        </entity-and>
        <if-empty field="productListPriceList">
            <set field="createListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="createListPriceMap.productId" from-field="parameters.productId"/>
            <set field="createListPriceMap.currencyUomId" value="NZD"/>
            <set field="createListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <set field="createListPriceMap.productStoreGroupId" value="_NA_"/>
            <set field="createListPriceMap.productPricePurposeId" value="PURCHASE"/>
            <set field="createListPriceMap.productPriceTypeId" value="LIST_PRICE"/>
            <call-service service-name="createProductPrice" in-map-name="createListPriceMap"/>
            
            <set-service-fields service-name="createProductPrice" to-map="createDefaultPriceMap" map="createListPriceMap"/>
            <set field="createDefaultPriceMap.productPriceTypeId" value="DEFAULT_PRICE"/>
            <call-service service-name="createProductPrice" in-map-name="createDefaultPriceMap"/>
        <else>
            <first-from-list entry="productListPrice" list="productListPriceList"/>
            <set field="updateListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateListPriceMap.productId" from-field="productListPrice.productId"/>
            <set field="updateListPriceMap.productPriceTypeId" from-field="productListPrice.productPriceTypeId"/>
            <set field="updateListPriceMap.productPricePurposeId" from-field="productListPrice.productPricePurposeId"/>
            <set field="updateListPriceMap.currencyUomId" from-field="productListPrice.currencyUomId"/>
            <set field="updateListPriceMap.productStoreGroupId" from-field="productListPrice.productStoreGroupId"/>
            <set field="updateListPriceMap.fromDate" from-field="productListPrice.fromDate"/>
            <set field="updateListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <call-service service-name="updateProductPrice" in-map-name="updateListPriceMap"/>
            
            <entity-and list="productDefaultPriceList" entity-name="ProductPrice">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productPriceTypeId" value="DEFAULT_PRICE"/>
                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
                <field-map field-name="currencyUomId" value="NZD"/>
                <field-map field-name="productStoreGroupId" value="_NA_"/>
            </entity-and>
            <if-not-empty field="productDefaultPriceList">
                <first-from-list entry="productDefaultPrice" list="productDefaultPriceList"/>
                <set field="updateDefaultPriceMap.userLogin" from-field="systemUserLogin"/>
                <set field="updateDefaultPriceMap.productId" from-field="productDefaultPrice.productId"/>
                <set field="updateDefaultPriceMap.productPriceTypeId" from-field="productDefaultPrice.productPriceTypeId"/>
                <set field="updateDefaultPriceMap.productPricePurposeId" from-field="productDefaultPrice.productPricePurposeId"/>
                <set field="updateDefaultPriceMap.currencyUomId" from-field="productDefaultPrice.currencyUomId"/>
                <set field="updateDefaultPriceMap.productStoreGroupId" from-field="productDefaultPrice.productStoreGroupId"/>
                <set field="updateDefaultPriceMap.fromDate" from-field="productDefaultPrice.fromDate"/>
                <set field="updateDefaultPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
                <call-service service-name="updateProductPrice" in-map-name="updateDefaultPriceMap"/>
            </if-not-empty>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.promoPrice">
            <entity-and list="productPromoPriceList" entity-name="ProductPrice">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
                <field-map field-name="currencyUomId" value="NZD"/>
                <field-map field-name="productStoreGroupId" value="_NA_"/>
            </entity-and>
            <if-empty field="productPromoPriceList">
                <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
            <else>
                <first-from-list entry="productPromoPrice" list="productPromoPriceList"/>
                <if-compare-field to-field="productPromoPrice.fromDate" operator="equals" field="parameters.promoPriceFromDate" type="Timestamp">
                    <set field="updatePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="updatePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="updatePromoPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="updatePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="updatePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="updatePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="updatePromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="updatePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <set field="updatePromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="updateProductPrice" in-map-name="updatePromoPriceMap"/>
                <else>
                    <set field="deletePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="deletePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="deleteProductPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="deletePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="deletePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="deletePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="deletePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <call-service service-name="deleteProductPrice" in-map-name="deletePromoPriceMap"/>
                    
                    <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                    <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                    <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                    <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                    <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                    <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                    <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
                </else>
                </if-compare-field>
            </else>
            </if-empty>
        </if-not-empty>
        
        <entity-one value-field="productAttribute" entity-name="ProductAttribute">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="attrName" value="SHIPPING_SIZE"/>
        </entity-one>
        <if-empty field="productAttribute">
            <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
            <set field="createProductAttributeMap.attrName" value="SHIPPING_SIZE"/>
            <set field="createProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
        <else>
            <set field="updateProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateProductAttributeMap.productId" from-field="productAttribute.productId"/>
            <set field="updateProductAttributeMap.attrName" from-field="productAttribute.attrName"/>
            <set field="updateProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="updateProductAttribute" in-map-name="updateProductAttributeMap"/>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.productSKU">
            <entity-one value-field="goodIdentification" entity-name="GoodIdentification">
                <field-map field-name="goodIdentificationTypeId" value="SKU"/>
                <field-map field-name="productId" from-field="parameters.productId"/>
            </entity-one>
            <if-empty field="goodIdentification">
                <set field="createGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="createGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="createGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="createGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="createGoodIdentification" in-map-name="createGoodIdentificationMap"/>
            <else>
                <set field="updateGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="updateGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="updateGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="updateGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="updateGoodIdentification" in-map-name="updateGoodIdentificationMap"/>
            </else>
            </if-empty>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="removeProductFromSeller" short-description="Remove Product From Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <set field="updateProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="updateProductMap.productId" from-field="parameters.productId"/>
        <set field="updateProductMap.salesDiscontinuationDate" from-field="nowTimestamp"/>
        <call-service service-name="updateProduct" in-map-name="updateProductMap"/>
        
        <entity-and list="productCategoryMembers" entity-name="ProductCategoryMember">
            <field-map field-name="productId" from-field="parameters.productId"/>
        </entity-and>
        <iterate entry="productCategoryMember" list="productCategoryMembers">
            <set field="updateProductToCategoryMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateProductToCategoryMap.productCategoryId" from-field="productCategoryMember.productCategoryId"/>
            <set field="updateProductToCategoryMap.productId" from-field="productCategoryMember.productId"/>
            <set field="updateProductToCategoryMap.fromDate" from-field="productCategoryMember.fromDate"/>
            <set field="updateProductToCategoryMap.thruDate" from-field="nowTimestamp"/>
            <call-service service-name="updateProductToCategory" in-map-name="updateProductToCategoryMap"/>
        </iterate>
        
        <field-to-result field="parameters.productId" result-name="productId"/>
        
        <set field="runTenantServiceInMap.tenantId" value="default"/>
        <set field="runTenantServiceInMap.serviceName" value="removeProductFromShopmax"/>
        <set field="runTenantServiceInMap.serviceParameters" from-field="parameters"/>
        <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
    </simple-method>
    
    <simple-method method-name="removeProductFromShopmax" short-description="Remove Product From Shopmax">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <set field="updateProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="updateProductMap.productId" from-field="parameters.productId"/>
        <set field="updateProductMap.salesDiscontinuationDate" from-field="nowTimestamp"/>
        <call-service service-name="updateProduct" in-map-name="updateProductMap"/>
        
        <entity-and list="productCategoryMembers" entity-name="ProductCategoryMember">
            <field-map field-name="productId" from-field="parameters.productId"/>
        </entity-and>
        <iterate entry="productCategoryMember" list="productCategoryMembers">
            <set field="updateProductToCategoryMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateProductToCategoryMap.productCategoryId" from-field="productCategoryMember.productCategoryId"/>
            <set field="updateProductToCategoryMap.productId" from-field="productCategoryMember.productId"/>
            <set field="updateProductToCategoryMap.fromDate" from-field="productCategoryMember.fromDate"/>
            <set field="updateProductToCategoryMap.thruDate" from-field="nowTimestamp"/>
            <call-service service-name="updateProductToCategory" in-map-name="updateProductToCategoryMap"/>
        </iterate>
    </simple-method>
    
    <simple-method method-name="createPhysicalDateTime" short-description="Create Date and Time To Physical Store">
        <make-value entity-name="PhysicalStoreDateTime" value-field="newEntity"/>
        <set field="newEntity.contactMechId" from-field="parameters.contactMechId"/>
        <set field="newEntity.day" from-field="parameters.day"/>
        <set field="newEntity.openHour" from-field="parameters.openHour"/>
        <set field="newEntity.openMin" from-field="parameters.openMin"/>
        <set field="newEntity.closeHour" from-field="parameters.closeHour"/>
        <set field="newEntity.closeMin" from-field="parameters.closeMin"/>
        <create-value value-field="newEntity"/>
    </simple-method>
    
    <simple-method method-name="updatePhysicalDateTime" short-description="Update Date and Time To Physical Store">
        <entity-one entity-name="PhysicalStoreDateTime" value-field="physicalStoreDateTime">
            <field-map field-name="contactMechId" from-field="parameters.contactMechId"/>
            <field-map field-name="day" from-field="parameters.day"/>
        </entity-one>
        <if-not-empty field="physicalStoreDateTime">
            <set-nonpk-fields value-field="physicalStoreDateTime" map="parameters"/>
            <store-value value-field="physicalStoreDateTime"/>
        </if-not-empty> 
    </simple-method>
    
    <simple-method method-name="updatePhysicalDateTime" short-description="Update Date and Time To Physical Store">
        <entity-one entity-name="PhysicalStoreDateTime" value-field="physicalStoreDateTime">
            <field-map field-name="contactMechId" from-field="parameters.contactMechId"/>
            <field-map field-name="day" from-field="parameters.day"/>
        </entity-one>
        <if-not-empty field="physicalStoreDateTime">
            <set-nonpk-fields value-field="physicalStoreDateTime" map="parameters"/>
            <store-value value-field="physicalStoreDateTime"/>
        </if-not-empty> 
    </simple-method>
    
    <simple-method method-name="deletePhysicalDateTime" short-description="Delete Date and Time To Physical Store">
        <entity-one entity-name="PhysicalStoreDateTime" value-field="physicalStoreDateTime">
            <field-map field-name="contactMechId" from-field="parameters.contactMechId"/>
            <field-map field-name="day" from-field="parameters.day"/>
        </entity-one>
        <remove-value value-field="physicalStoreDateTime"/>
    </simple-method>
    
    <simple-method method-name="updateProductToSeller" short-description="Update Product To Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <set field="updateProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="updateProductMap.productId" from-field="parameters.productId"/>
        <set field="updateProductMap.internalName" from-field="parameters.productName"/>
        <set field="updateProductMap.productName" from-field="parameters.productName"/>
        <set field="updateProductMap.longDescription" from-field="parameters.description"/>
        <call-service service-name="updateProduct" in-map-name="updateProductMap"/>
        <field-to-result field="parameters.productId" result-name="productId"/>
        
        <!-- Create product to category -->
        <set field="categoryLists" from-field="parameters.listCategory"/>
        <if-not-empty field="categoryLists">
            <set field="categoryList" value="${groovy: categoryList = categoryLists.split(&quot;,&quot;); return categoryList.toList();}" type="List"/>
            <iterate entry="productCategoryId" list="categoryList" >
                <set field="createProductToCategoryMap.userLogin" from-field="systemUserLogin"/>
                <set field="createProductToCategoryMap.productCategoryId" from-field="productCategoryId"/>
                <set field="createProductToCategoryMap.productId" from-field="parameters.productId"/>
                <set field="createProductToCategoryMap.fromDate" from-field="nowTimestamp"/>
                <call-service service-name="safeAddProductToCategory" in-map-name="createProductToCategoryMap"/>
                
                <set field="setCategoryHasProductMap.productCategoryId" from-field="productCategoryId"/>
                <call-service service-name="setCategoryHasProduct" in-map-name="setCategoryHasProductMap"/>
            </iterate>
        </if-not-empty>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._uploadedFile1_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile1"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="01" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile2_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile2"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="02" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile3_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile3"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile3_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile3_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="03" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile4_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile4"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile4_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile4_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="04" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <entity-and list="productListPriceList" entity-name="ProductPrice">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productPriceTypeId" value="LIST_PRICE"/>
            <field-map field-name="productPricePurposeId" value="PURCHASE"/>
            <field-map field-name="currencyUomId" value="NZD"/>
            <field-map field-name="productStoreGroupId" value="_NA_"/>
        </entity-and>
        <if-empty field="productListPriceList">
            <set field="createListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="createListPriceMap.productId" from-field="parameters.productId"/>
            <set field="createListPriceMap.currencyUomId" value="NZD"/>
            <set field="createListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <set field="createListPriceMap.productStoreGroupId" value="_NA_"/>
            <set field="createListPriceMap.productPricePurposeId" value="PURCHASE"/>
            <set field="createListPriceMap.productPriceTypeId" value="LIST_PRICE"/>
            <call-service service-name="createProductPrice" in-map-name="createListPriceMap"/>
        <else>
            <first-from-list entry="productListPrice" list="productListPriceList"/>
            <set field="updateListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateListPriceMap.productId" from-field="productListPrice.productId"/>
            <set field="updateListPriceMap.productPriceTypeId" from-field="productListPrice.productPriceTypeId"/>
            <set field="updateListPriceMap.productPricePurposeId" from-field="productListPrice.productPricePurposeId"/>
            <set field="updateListPriceMap.currencyUomId" from-field="productListPrice.currencyUomId"/>
            <set field="updateListPriceMap.productStoreGroupId" from-field="productListPrice.productStoreGroupId"/>
            <set field="updateListPriceMap.fromDate" from-field="productListPrice.fromDate"/>
            <set field="updateListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <call-service service-name="updateProductPrice" in-map-name="updateListPriceMap"/>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.promoPrice">
            <entity-and list="productPromoPriceList" entity-name="ProductPrice">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
                <field-map field-name="currencyUomId" value="NZD"/>
                <field-map field-name="productStoreGroupId" value="_NA_"/>
            </entity-and>
            <if-empty field="productPromoPriceList">
                <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
            <else>
                <first-from-list entry="productPromoPrice" list="productPromoPriceList"/>
                <if-compare-field to-field="productPromoPrice.fromDate" operator="equals" field="parameters.promoPriceFromDate" type="Timestamp">
                    <set field="updatePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="updatePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="updatePromoPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="updatePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="updatePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="updatePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="updatePromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="updatePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <set field="updatePromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="updateProductPrice" in-map-name="updatePromoPriceMap"/>
                <else>
                    <set field="deletePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="deletePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="deleteProductPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="deletePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="deletePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="deletePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="deletePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <call-service service-name="deleteProductPrice" in-map-name="deletePromoPriceMap"/>
                    
                    <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                    <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                    <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                    <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                    <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                    <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                    <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
                </else>
                </if-compare-field>
            </else>
            </if-empty>
        </if-not-empty>
        
        <entity-one value-field="productAttribute" entity-name="ProductAttribute">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="attrName" value="SHIPPING_SIZE"/>
        </entity-one>
        <if-empty field="productAttribute">
            <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
            <set field="createProductAttributeMap.attrName" value="SHIPPING_SIZE"/>
            <set field="createProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
        <else>
            <set field="updateProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateProductAttributeMap.productId" from-field="productAttribute.productId"/>
            <set field="updateProductAttributeMap.attrName" from-field="productAttribute.attrName"/>
            <set field="updateProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="updateProductAttribute" in-map-name="updateProductAttributeMap"/>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.productSKU">
            <entity-one value-field="goodIdentification" entity-name="GoodIdentification">
                <field-map field-name="goodIdentificationTypeId" value="SKU"/>
                <field-map field-name="productId" from-field="parameters.productId"/>
            </entity-one>
            <if-empty field="goodIdentification">
                <set field="createGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="createGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="createGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="createGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="createGoodIdentification" in-map-name="createGoodIdentificationMap"/>
            <else>
                <set field="updateGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="updateGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="updateGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="updateGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="updateGoodIdentification" in-map-name="updateGoodIdentificationMap"/>
            </else>
            </if-empty>
        </if-not-empty>
        
        <set field="success" value="true"/>
        <field-to-result field="success" result-name="updatesuccess"/>
        
        <set field="parameters.partyId" from-field="userLogin.partyId"/>
        <set field="runTenantServiceInMap.tenantId" value="default"/>
        <set field="runTenantServiceInMap.serviceName" value="updateProductToShopmax"/>
        <set field="runTenantServiceInMap.serviceParameters" from-field="parameters"/>
        <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
    </simple-method>
    
    <simple-method method-name="updateProductToShopmax" short-description="Update Product To Shopmax">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        <now-timestamp field="nowTimestamp"/>
        
        <set field="updateProductMap.userLogin" from-field="systemUserLogin"/>
        <set field="updateProductMap.productId" from-field="parameters.productId"/>
        <set field="updateProductMap.internalName" from-field="parameters.productName"/>
        <set field="updateProductMap.productName" from-field="parameters.productName"/>
        <set field="updateProductMap.longDescription" from-field="parameters.description"/>
        <call-service service-name="updateProduct" in-map-name="updateProductMap"/>
        
        <!-- Create product to category -->
        <set field="categoryLists" from-field="parameters.listCategory"/>
        <if-not-empty field="categoryLists">
            <set field="categoryList" value="${groovy: categoryList = categoryLists.split(&quot;,&quot;); return categoryList.toList();}" type="List"/>
            <iterate entry="productCategoryId" list="categoryList" >
                <set field="createProductToCategoryMap.userLogin" from-field="systemUserLogin"/>
                <set field="createProductToCategoryMap.productCategoryId" from-field="productCategoryId"/>
                <set field="createProductToCategoryMap.productId" from-field="parameters.productId"/>
                <set field="createProductToCategoryMap.fromDate" from-field="nowTimestamp"/>
                <call-service service-name="safeAddProductToCategory" in-map-name="createProductToCategoryMap"/>
                
                <set field="setCategoryHasProductMap.productCategoryId" from-field="productCategoryId"/>
                <call-service service-name="setCategoryHasProduct" in-map-name="setCategoryHasProductMap"/>
            </iterate>
        </if-not-empty>
        
        <!-- Create images of product -->
        <if-not-empty field="parameters._uploadedFile1_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile1"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile1_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile1_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="01" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile2_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile2"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile2_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile2_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="02" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile3_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile3"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile3_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile3_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="03" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        <if-not-empty field="parameters._uploadedFile4_fileName">
            <set field="addAdditionalViewForProductMap.userLogin" from-field="systemUserLogin"/>
            <set field="addAdditionalViewForProductMap.productId" from-field="parameters.productId"/>
            <!-- <set field="addAdditionalViewForProductMap.imageResize" from-field="parameters.imageResize"/> -->
            <set field="addAdditionalViewForProductMap.uploadedFile" from-field="parameters.uploadedFile4"/>
            <set field="addAdditionalViewForProductMap.productContentTypeId" value="IMAGE"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_fileName" from-field="parameters._uploadedFile4_fileName"/>
            <set field="addAdditionalViewForProductMap._uploadedFile_contentType" from-field="parameters._uploadedFile4_contentType"/>
            <set field="addAdditionalViewForProductMap.sequenceNum" value="04" type="Long"/>
            <call-service service-name="addMultipleuploadForProduct" in-map-name="addAdditionalViewForProductMap"/>
            <clear-field field="addAdditionalViewForProductMap"/>
        </if-not-empty>
        
        <entity-and list="productListPriceList" entity-name="ProductPrice">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productPriceTypeId" value="LIST_PRICE"/>
            <field-map field-name="productPricePurposeId" value="PURCHASE"/>
            <field-map field-name="currencyUomId" value="NZD"/>
            <field-map field-name="productStoreGroupId" value="_NA_"/>
        </entity-and>
        <if-empty field="productListPriceList">
            <set field="createListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="createListPriceMap.productId" from-field="parameters.productId"/>
            <set field="createListPriceMap.currencyUomId" value="NZD"/>
            <set field="createListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <set field="createListPriceMap.productStoreGroupId" value="_NA_"/>
            <set field="createListPriceMap.productPricePurposeId" value="PURCHASE"/>
            <set field="createListPriceMap.productPriceTypeId" value="LIST_PRICE"/>
            <call-service service-name="createProductPrice" in-map-name="createListPriceMap"/>
        <else>
            <first-from-list entry="productListPrice" list="productListPriceList"/>
            <set field="updateListPriceMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateListPriceMap.productId" from-field="productListPrice.productId"/>
            <set field="updateListPriceMap.productPriceTypeId" from-field="productListPrice.productPriceTypeId"/>
            <set field="updateListPriceMap.productPricePurposeId" from-field="productListPrice.productPricePurposeId"/>
            <set field="updateListPriceMap.currencyUomId" from-field="productListPrice.currencyUomId"/>
            <set field="updateListPriceMap.productStoreGroupId" from-field="productListPrice.productStoreGroupId"/>
            <set field="updateListPriceMap.fromDate" from-field="productListPrice.fromDate"/>
            <set field="updateListPriceMap.price" from-field="parameters.listingPrice" type="BigDecimal"/>
            <call-service service-name="updateProductPrice" in-map-name="updateListPriceMap"/>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.promoPrice">
            <entity-and list="productPromoPriceList" entity-name="ProductPrice">
                <field-map field-name="productId" from-field="parameters.productId"/>
                <field-map field-name="productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <field-map field-name="productPricePurposeId" value="PURCHASE"/>
                <field-map field-name="currencyUomId" value="NZD"/>
                <field-map field-name="productStoreGroupId" value="_NA_"/>
            </entity-and>
            <if-empty field="productPromoPriceList">
                <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
            <else>
                <first-from-list entry="productPromoPrice" list="productPromoPriceList"/>
                <if-compare-field to-field="productPromoPrice.fromDate" operator="equals" field="parameters.promoPriceFromDate" type="Timestamp">
                    <set field="updatePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="updatePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="updatePromoPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="updatePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="updatePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="updatePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="updatePromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="updatePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <set field="updatePromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="updateProductPrice" in-map-name="updatePromoPriceMap"/>
                <else>
                    <set field="deletePromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="deletePromoPriceMap.productId" from-field="productPromoPrice.productId"/>
                    <set field="deleteProductPriceMap.productPriceTypeId" from-field="productPromoPrice.productPriceTypeId"/>
                    <set field="deletePromoPriceMap.productPricePurposeId" from-field="productPromoPrice.productPricePurposeId"/>
                    <set field="deletePromoPriceMap.currencyUomId" from-field="productPromoPrice.currencyUomId"/>
                    <set field="deletePromoPriceMap.productStoreGroupId" from-field="productPromoPrice.productStoreGroupId"/>
                    <set field="deletePromoPriceMap.fromDate" from-field="productPromoPrice.fromDate" type="Timestamp"/>
                    <call-service service-name="deleteProductPrice" in-map-name="deletePromoPriceMap"/>
                    
                    <set field="createPromoPriceMap.userLogin" from-field="systemUserLogin"/>
                    <set field="createPromoPriceMap.productId" from-field="parameters.productId"/>
                    <set field="createPromoPriceMap.productPriceTypeId" value="SPECIAL_PROMO_PRICE"/>
                    <set field="createPromoPriceMap.productPricePurposeId" value="PURCHASE"/>
                    <set field="createPromoPriceMap.currencyUomId" value="NZD"/>
                    <set field="createPromoPriceMap.productStoreGroupId" value="_NA_"/>
                    <set field="createPromoPriceMap.price" from-field="parameters.promoPrice" type="BigDecimal"/>
                    <set field="createPromoPriceMap.fromDate" from-field="parameters.promoPriceFromDate" type="Timestamp"/>
                    <set field="createPromoPriceMap.thruDate" from-field="parameters.promoPriceThruDate" type="Timestamp"/>
                    <call-service service-name="createProductPrice" in-map-name="createPromoPriceMap"/>
                </else>
                </if-compare-field>
            </else>
            </if-empty>
        </if-not-empty>
        
        <entity-one value-field="productAttribute" entity-name="ProductAttribute">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="attrName" value="SHIPPING_SIZE"/>
        </entity-one>
        <if-empty field="productAttribute">
            <set field="createProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="createProductAttributeMap.productId" from-field="parameters.productId"/>
            <set field="createProductAttributeMap.attrName" value="SHIPPING_SIZE"/>
            <set field="createProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="createProductAttribute" in-map-name="createProductAttributeMap"/>
        <else>
            <set field="updateProductAttributeMap.userLogin" from-field="systemUserLogin"/>
            <set field="updateProductAttributeMap.productId" from-field="productAttribute.productId"/>
            <set field="updateProductAttributeMap.attrName" from-field="productAttribute.attrName"/>
            <set field="updateProductAttributeMap.attrValue" from-field="parameters.shippingSize"/>
            <call-service service-name="updateProductAttribute" in-map-name="updateProductAttributeMap"/>
        </else>
        </if-empty>
        
        <if-not-empty field="parameters.productSKU">
            <entity-one value-field="goodIdentification" entity-name="GoodIdentification">
                <field-map field-name="goodIdentificationTypeId" value="SKU"/>
                <field-map field-name="productId" from-field="parameters.productId"/>
            </entity-one>
            <if-empty field="goodIdentification">
                <set field="createGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="createGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="createGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="createGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="createGoodIdentification" in-map-name="createGoodIdentificationMap"/>
            <else>
                <set field="updateGoodIdentificationMap.userLogin" from-field="systemUserLogin"/>
                <set field="updateGoodIdentificationMap.goodIdentificationTypeId" value="SKU"/>
                <set field="updateGoodIdentificationMap.productId" from-field="parameters.productId"/>
                <set field="updateGoodIdentificationMap.idValue" from-field="parameters.productSKU"/>
                <call-service service-name="updateGoodIdentification" in-map-name="updateGoodIdentificationMap"/>
            </else>
            </if-empty>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="removeProductContentAndImageFileSeller" short-description="Remove Product Content and Image File of Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <entity-one value-field="productContent" entity-name="ProductContent">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="contentId" from-field="parameters.contentId"/>
            <field-map field-name="productContentTypeId" from-field="parameters.productContentTypeId"/>
            <field-map field-name="fromDate" from-field="parameters.fromDate"/>
        </entity-one>
        <if-not-empty field="productContent">
            <entity-and list="contentAssocs" entity-name="ContentAssoc">
                <field-map field-name="contentId" from-field="parameters.contentId"/>
                <field-map field-name="contentAssocTypeId" value="IMAGE_THUMBNAIL"/>
            </entity-and>
            <if-not-empty field="contentAssocs">
                <iterate entry="contentAssoc" list="contentAssocs">
                    <remove-value value-field="contentAssoc"/>
                    
                    <set field="removeContent.contentId" from-field="contentAssoc.contentIdTo"/>
                    <set field="removeContent.productId" from-field="parameters.productId"/>
                    <call-service service-name="removeProductContentForImageManagement" in-map-name="removeContent"/>
                </iterate>
            </if-not-empty>
            
            <make-value value-field="lookupPKMap" entity-name="ProductContent"/>
            <set-pk-fields map="parameters" value-field="lookupPKMap"/>
            <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
            <remove-value value-field="lookedUpValue"/>
            <set field="removeContent.contentId" from-field="parameters.contentId"/>
            <set field="removeContent.productId" from-field="parameters.productId"/>
            <call-service service-name="removeProductContentForImageManagement" in-map-name="removeContent"/>
            
            <set field="removeProductImageShopmaxMap.userLogin" from-field="systemUserLogin"/>
            <set field="removeProductImageShopmaxMap.productId" from-field="lookedUpValue.productId"/>
            <set field="removeProductImageShopmaxMap.productContentTypeId" from-field="lookedUpValue.productContentTypeId"/>
            <set field="removeProductImageShopmaxMap.sequenceNum" from-field="lookedUpValue.sequenceNum"/>
            <set field="runTenantServiceInMap.tenantId" value="default"/>
            <set field="runTenantServiceInMap.serviceName" value="removeProductContentAndImageFileShopmax"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="removeProductImageShopmaxMap"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="removeProductContentAndImageFileShopmax" short-description="Remove Product Content and Image File of Shopmax">
        <entity-and entity-name="ProductContent" list="productContents">
            <field-map field-name="productId" from-field="parameters.productId"/>
            <field-map field-name="productContentTypeId" from-field="parameters.productContentTypeId"/>
            <field-map field-name="sequenceNum" from-field="parameters.sequenceNum"/>
        </entity-and>
        <if-not-empty field="productContents">
            <iterate entry="productContent" list="productContents">
                <entity-and list="contentAssocs" entity-name="ContentAssoc">
                    <field-map field-name="contentId" from-field="productContent.contentId"/>
                    <field-map field-name="contentAssocTypeId" value="IMAGE_THUMBNAIL"/>
                </entity-and>
                <if-not-empty field="contentAssocs">
                    <iterate entry="contentAssoc" list="contentAssocs">
                        <remove-value value-field="contentAssoc"/>
                        
                        <set field="removeContent.contentId" from-field="contentAssoc.contentIdTo"/>
                        <set field="removeContent.productId" from-field="parameters.productId"/>
                        <call-service service-name="removeProductContentForImageManagement" in-map-name="removeContent"/>
                    </iterate>
                </if-not-empty>
                
                <make-value value-field="lookupPKMap" entity-name="ProductContent"/>
                <set-pk-fields map="productContent" value-field="lookupPKMap"/>
                <find-by-primary-key map="lookupPKMap" value-field="lookedUpValue"/>
                <remove-value value-field="lookedUpValue"/>
                <set field="removeContent.contentId" from-field="productContent.contentId"/>
                <set field="removeContent.productId" from-field="parameters.productId"/>
                <call-service service-name="removeProductContentForImageManagement" in-map-name="removeContent"/>
            </iterate>
        </if-not-empty>
    </simple-method>
    
    <simple-method method-name="createBuyerToSeller" short-description="Create Buyer To Seller">
        <entity-one value-field="systemUserLogin" entity-name="UserLogin">
            <field-map field-name="userLoginId" value="system"/>
        </entity-one>
        
        <set field="tenantId" from-field="parameters.tenantId"/>
        
        <entity-one value-field="party" entity-name="Party">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-one>
        
        <entity-one value-field="person" entity-name="Person">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-one>
        
        <entity-and list="userLoginBuyers" entity-name="UserLogin">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-and>
        <first-from-list entry="userLoginBuyer" list="userLoginBuyers"/>
        
        <script>groovy:
            import org.ofbiz.entity.DelegatorFactory;
            def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
            def tenantParty = tenantDelegator.makeValue("Party");
            tenantParty = party;
            tenantDelegator.create(tenantParty);
            
            def tenantPerson = tenantDelegator.makeValue("Person");
            tenantPerson = person;
            tenantDelegator.create(tenantPerson);
            
            def tenantUserLogin = tenantDelegator.makeValue("UserLogin");
            tenantUserLogin = userLoginBuyer;
            tenantDelegator.create(tenantUserLogin);
        </script>
        
        <set field="createCustomerRoleCtx.userLogin" from-field="systemUserLogin"/>
        <set field="createCustomerRoleCtx.partyId" from-field="parameters.partyId"/>
        <set field="createCustomerRoleCtx.roleTypeId" value="CUSTOMER"/>
        <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
        <set field="runTenantServiceInMap.serviceName" value="createPartyRole"/>
        <set field="runTenantServiceInMap.serviceParameters" from-field="createCustomerRoleCtx"/>
        <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
        
        <set field="createBuyerRoleCtx.userLogin" from-field="systemUserLogin"/>
        <set field="createBuyerRoleCtx.partyId" from-field="parameters.partyId"/>
        <set field="createBuyerRoleCtx.roleTypeId" value="BUYER"/>
        <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
        <set field="runTenantServiceInMap.serviceName" value="createPartyRole"/>
        <set field="runTenantServiceInMap.serviceParameters" from-field="createBuyerRoleCtx"/>
        <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
        
        <!-- Create email address -->
        <entity-and list="emailAddressList" entity-name="PartyContactDetailByPurpose" filter-by-date="true">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
            <field-map field-name="contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
        </entity-and>
        <if-not-empty field="emailAddressList">
            <first-from-list entry="emailAddress" list="emailAddressList"/>
            <entity-one value-field="emailAddressContactMech" entity-name="ContactMech">
                <field-map field-name="contactMechId" from-field="emailAddress.contactMechId"/>
            </entity-one>
            <entity-and list="emailAddressPartyContactMechs" entity-name="PartyContactMech">
                <field-map field-name="partyId" from-field="parameters.partyId"/>
                <field-map field-name="contactMechId" from-field="emailAddress.contactMechId"/>
            </entity-and>
            <first-from-list entry="emailAddressPartyContactMech" list="emailAddressPartyContactMechs"/>
            <script>groovy:
                import org.ofbiz.entity.DelegatorFactory;
                def tenantDelegator = DelegatorFactory.getDelegator(delegator.getDelegatorBaseName() + "#" + tenantId);
                def tenantContactMech = tenantDelegator.makeValue("ContactMech");
                tenantContactMech = emailAddressContactMech;
                tenantDelegator.create(tenantContactMech);
                
                def tenantPartyContactMech = tenantDelegator.makeValue("PartyContactMech");
                tenantPartyContactMech = emailAddressPartyContactMech;
                tenantDelegator.create(tenantPartyContactMech);
            </script>
            
            <set field="emailPurposeContext.userLogin" from-field="systemUserLogin"/>
            <set field="emailPurposeContext.partyId" from-field="parameters.partyId"/>
            <set field="emailPurposeContext.contactMechId" from-field="emailAddress.contactMechId"/>
            <set field="emailPurposeContext.contactMechPurposeTypeId" value="PRIMARY_EMAIL"/>
            <set field="runTenantServiceInMap.tenantId" from-field="tenantId"/>
            <set field="runTenantServiceInMap.serviceName" value="createPartyContactMechPurpose"/>
            <set field="runTenantServiceInMap.serviceParameters" from-field="emailPurposeContext"/>
            <call-service service-name="runTenantService" in-map-name="runTenantServiceInMap"/>
        </if-not-empty>
    </simple-method>
</simple-methods>
